B = rnorm(100, mean = 10)
) |>
mutate(
dplyr::across(
A,
\(.x) c(diff(.x), tail(diff(.x), 1)),
.names = "delta_sample"),
dplyr::across(
A,
\(.x) floor(.x * resample_rate / 2) / resample_rate),
) |>
dplyr::summarise(
.by = A,
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
## TODO 2025-06-23 is this robust enough if multiple event strings
## are present within one resample?
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample)
set.seed(13) ; tibble::tibble(
A = seq(1, by = 0.5, len = 100),
B = rnorm(100, mean = 10)
) |>
mutate(
dplyr::across(
A,
\(.x) c(diff(.x), tail(diff(.x), 1)),
.names = "delta_sample"),
dplyr::across(
A,
\(.x) floor(.x * resample_rate / 2) / resample_rate),
) |>
dplyr::summarise(
.by = A,
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
## TODO 2025-06-23 is this robust enough if multiple event strings
## are present within one resample?
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample)
set.seed(13) ; tibble::tibble(
A = seq(1, by = 0.5, len = 100),
B = rnorm(100, mean = 10)
)
set.seed(13) ; tibble::tibble(
A = seq(1, by = 1, len = 100),
B = rnorm(100, mean = 10)
)
set.seed(13) ; tibble::tibble(
A = seq(1, by = 0.5, len = 100),
B = rnorm(100, mean = 10)
) |>
mutate(
dplyr::across(
A,
\(.x) c(diff(.x), tail(diff(.x), 1)),
.names = "delta_sample"),
dplyr::across(
A,
\(.x) floor(.x * resample_rate / 2) / resample_rate),
) |>
dplyr::summarise(
.by = A,
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
## TODO 2025-06-23 is this robust enough if multiple event strings
## are present within one resample?
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample)
resample_rate
set.seed(13) ; tibble::tibble(
A = seq(1, by = 0.5, len = 100),
B = rnorm(100, mean = 10)
)
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
resample_rate = 10,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
resample_rate = 25,
# resample_time = NULL
))
(data <- read_data(
file_path = r"(C:\R-Projects\mNIRS\inst\moxy_ramp_example.xlsx)",
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
# event_column = c(event = "...11"),
.keep_all = FALSE))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
resample_rate = 1,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
sample_rate = 2,
resample_rate = 1,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
sample_rate = 1,
resample_rate = 1,
# resample_time = NULL
))
(data <- read_data(
file_path = r"(C:\R-Projects\mNIRS\inst\moxy_ramp_example.xlsx)",
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
# event_column = c(event = "...11"),
.keep_all = FALSE))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
sample_rate = 2,
resample_rate = 1,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
sample_rate = 1,
resample_rate = 1,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
resample_rate = 1,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
# resample_rate = 1,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
resample_rate = 1,
# resample_time = NULL
))
#
## troubleshooting =================================
(data <- read_data(
file_path = r"(C:\OneDrive - UBC\Body Position Study\Raw Data\Eva-pilot-Oxy-2025-05-27.xlsx)",
nirs_columns = c(VL_O2Hb = 5, VL_HHb = 6),
sample_column = c(sample = 1),
# event_column = c(event = "...11"),
.keep_all = FALSE))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
resample_rate = 10,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
resample_rate = 25,
# resample_time = NULL
))
#
## troubleshooting =================================
(data <- read_data(
file_path = r"(C:\OneDrive - UBC\Body Position Study\Raw Data\Eva-pilot-Oxy-2025-05-27.xlsx)",
nirs_columns = c(VL_O2Hb = 5, VL_HHb = 6),
sample_column = c(sample = 1),
# event_column = c(event = "...11"),
.keep_all = FALSE))
#
(sample_column <- attributes(data)$sample_column)
(sample_rate <- attributes(data)$sample_rate)
(resample_rate <- 10)
data |>
dplyr::mutate(
## calculate time difference for weighting
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), tail(diff(.x), 1)),
.names = "delta_sample"),
## Round to nearest resample rate
dplyr::across(
dplyr::any_of(sample_column),
# \(.x) floor(.x * resample_rate / sample_rate) / resample_rate * sample_rate),
\(.x) #if (empirical_sample_rate == sample_rate) {
#     floor(.x * resample_rate) / resample_rate
# } else {
floor(.x * resample_rate / sample_rate) /
resample_rate * sample_rate
# }
),
) |>
dplyr::summarise(
.by = dplyr::any_of(sample_column),
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
## TODO 2025-06-23 is this robust enough if multiple event strings
## are present within one resample?
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample)
(resample_rate <- 25)
data |>
dplyr::mutate(
## calculate time difference for weighting
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), tail(diff(.x), 1)),
.names = "delta_sample"),
## Round to nearest resample rate
dplyr::across(
dplyr::any_of(sample_column),
# \(.x) floor(.x * resample_rate / sample_rate) / resample_rate * sample_rate),
\(.x) #if (empirical_sample_rate == sample_rate) {
#     floor(.x * resample_rate) / resample_rate
# } else {
floor(.x * resample_rate / sample_rate) /
resample_rate * sample_rate
# }
),
) |>
dplyr::summarise(
.by = dplyr::any_of(sample_column),
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
## TODO 2025-06-23 is this robust enough if multiple event strings
## are present within one resample?
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample)
(data <- read_data(
file_path = r"(C:\R-Projects\mNIRS\inst\moxy_ramp_example.xlsx)",
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
# event_column = c(event = "...11"),
.keep_all = FALSE))
#
(sample_column <- attributes(data)$sample_column)
(sample_rate <- attributes(data)$sample_rate)
(resample_rate <- 1)
data |>
dplyr::mutate(
## calculate time difference for weighting
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), tail(diff(.x), 1)),
.names = "delta_sample"),
## Round to nearest resample rate
dplyr::across(
dplyr::any_of(sample_column),
# \(.x) floor(.x * resample_rate / sample_rate) / resample_rate * sample_rate),
\(.x) #if (empirical_sample_rate == sample_rate) {
#     floor(.x * resample_rate) / resample_rate
# } else {
floor(.x * resample_rate / sample_rate) /
resample_rate * sample_rate
# }
),
) |>
dplyr::summarise(
.by = dplyr::any_of(sample_column),
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
## TODO 2025-06-23 is this robust enough if multiple event strings
## are present within one resample?
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample)
data |>
dplyr::mutate(
## calculate time difference for weighting
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), tail(diff(.x), 1)),
.names = "delta_sample"),
## Round to nearest resample rate
dplyr::across(
dplyr::any_of(sample_column),
# \(.x) floor(.x * resample_rate / sample_rate) / resample_rate * sample_rate),
\(.x) #if (empirical_sample_rate == sample_rate) {
floor(.x * resample_rate) / resample_rate
# } else {
# floor(.x * resample_rate / sample_rate) /
#     resample_rate * sample_rate
# }
),
) |>
dplyr::summarise(
.by = dplyr::any_of(sample_column),
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
## TODO 2025-06-23 is this robust enough if multiple event strings
## are present within one resample?
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample)
(resample_rate <- 0.1)
data |>
dplyr::mutate(
## calculate time difference for weighting
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), tail(diff(.x), 1)),
.names = "delta_sample"),
## Round to nearest resample rate
dplyr::across(
dplyr::any_of(sample_column),
# \(.x) floor(.x * resample_rate / sample_rate) / resample_rate * sample_rate),
\(.x) #if (empirical_sample_rate == sample_rate) {
floor(.x * resample_rate) / resample_rate
# } else {
# floor(.x * resample_rate / sample_rate) /
#     resample_rate * sample_rate
# }
),
) |>
dplyr::summarise(
.by = dplyr::any_of(sample_column),
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
## TODO 2025-06-23 is this robust enough if multiple event strings
## are present within one resample?
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample)
#
## troubleshooting =================================
(data <- read_data(
file_path = r"(C:\OneDrive - UBC\Body Position Study\Raw Data\Eva-pilot-Oxy-2025-05-27.xlsx)",
nirs_columns = c(VL_O2Hb = 5, VL_HHb = 6),
sample_column = c(sample = 1),
# event_column = c(event = "...11"),
.keep_all = FALSE))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
resample_rate = 10,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
resample_rate = 1,
# resample_time = NULL
))
(data <- read_data(
file_path = r"(C:\R-Projects\mNIRS\inst\moxy_ramp_example.xlsx)",
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
# event_column = c(event = "...11"),
.keep_all = FALSE))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
resample_rate = 1,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
resample_rate = 0.1,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
resample_rate = 2,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 1,
# resample_rate = 2,
# resample_time = NULL
))
#
## troubleshooting =================================
(data <- read_data(
file_path = r"(C:\OneDrive - UBC\Body Position Study\Raw Data\Eva-pilot-Oxy-2025-05-27.xlsx)",
nirs_columns = c(VL_O2Hb = 5, VL_HHb = 6),
sample_column = c(sample = 1),
# event_column = c(event = "...11"),
.keep_all = FALSE))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
sample_rate = 10,
resample_rate = 2,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
sample_rate = 10,
resample_rate = 1,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
sample_rate = 10,
resample_rate = 5,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
sample_rate = 25,
resample_rate = 5,
# resample_time = NULL
))
# #
(y <- resample_dataframe(
data = data,
# sample_column = "time",
sample_rate = 50,
resample_rate = 10,
# resample_time = NULL
))
devtools::build_readme()
