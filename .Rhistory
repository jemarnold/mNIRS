verbose = FALSE),
"not detected")
expect_warning(
read_data(
file_path = file_path,
nirs_columns = c(smo2 = "6",
smo2 = "9"),
sample_column = c(sample = 1),
verbose = TRUE),
"Duplicate input column")
expect_message(
read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
sample_column = NULL,
verbose = TRUE),
"No `sample_column` provided")
})
expect_s3_class(oxy_data$sample, "numeric")
file_path <- system.file("extdata",
"oxysoft_interval_example.xlsx",
package = "mNIRS")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
verbose = FALSE)
)
expect_length(
oxy_data <- read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
sample_column = c(sample = 1),
keep_all = FALSE,
verbose = TRUE),
3)
expect_s3_class(oxy_data$sample, "numeric")
expect_length(
oxy_data <- read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
sample_column = c(sample = 1),
keep_all = FALSE,
verbose = TRUE),
3)
expect_type(oxy_data$sample, "double")
expect_type(oxy_data$sample, "double")
expect_s3_class(oxy_data, "mNIRS.data")
expect_s3_class(oxy_data, "data.frame")
test_that("read_data oxysoft works", {
file_path <- system.file("extdata",
"oxysoft_interval_example.xlsx",
package = "mNIRS")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
verbose = FALSE)
)
expect_length(
oxy_data <- read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
sample_column = c(sample = 1),
keep_all = FALSE,
verbose = TRUE),
3)
expect_type(oxy_data$sample, "double")
expect_s3_class(oxy_data, "mNIRS.data")
expect_s3_class(oxy_data, "data.frame")
expect_true(
all(c("nirs_columns", "sample_column", "sample_rate") %in%
names(attributes(oxy_data))))
expect_equal(attr(oxy_data, "sample_rate"), 50)
expect_error(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_doesnt_exist"),
verbose = FALSE),
"not detected")
expect_warning(
read_data(
file_path = file_path,
nirs_columns = c(smo2 = "6",
smo2 = "9"),
sample_column = c(sample = 1),
verbose = TRUE),
"Duplicate input column")
expect_message(
read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
sample_column = NULL,
verbose = TRUE),
"No `sample_column` provided")
})
file_path <- system.file("extdata",
"vo2master_moxyunit_example.xlsx",
package = "mNIRS")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = FALSE)
)
expect_length(
vmpro_data <- read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
numeric_time = FALSE,
keep_all = TRUE,
verbose = FALSE),
5)
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = FALSE)
)
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = FALSE)
file_path <- system.file("extdata",
"vo2master_moxyunit_example.xlsx",
package = "mNIRS")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = FALSE)
)
devtools::load_all()
file_path <- system.file("extdata",
"vo2master_moxyunit_example.xlsx",
package = "mNIRS")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = FALSE)
)
expect_length(
vmpro_data <- read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
numeric_time = FALSE,
keep_all = TRUE,
verbose = FALSE),
5)
expect_s3_class(vmpro_data, "mNIRS.data")
expect_s3_class(vmpro_data, "data.frame")
expect_s3_class(vmpro_data$time, "POSIXct")
expect_true(
all(c("nirs_columns", "sample_column", "sample_rate") %in%
names(attributes(vmpro_data))))
expect_equal(attr(vmpro_data, "sample_rate"), 1)
expect_error(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_doesnt_exist"),
verbose = FALSE),
"not detected")
expect_warning(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = TRUE),
"Duplicate input column")
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = TRUE)
expect_warning(
read_data(
file_path = file_path,
nirs_columns = c(smo2 = "SmO2[%]",
smo2 = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = TRUE),
"Duplicate input column")
expect_message(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = NULL,
verbose = TRUE),
"No `sample_column` provided")
x = "Timestamp (seconds passed)"
unlist(strsplit(x, "\\s*,\\s*"))
x = 'time = "Timestamp (seconds passed)"'
unlist(strsplit(x, "\\s*,\\s*"))
vec <- unlist(strsplit(x, "\\s*,\\s*"))
strsplit(vec, "\\s*=\\s*")
unlist(strsplit(x, "\\s*,\\s*"))
x
x = c(smo2_left = "SmO2 unfiltered",
smo2_right = "SmO2 unfiltered")
vec <- unlist(strsplit(x, "\\s*,\\s*"))
vec
x
unlist(strsplit(x, "\\s*,\\s*"))
vec <- unlist(strsplit(x, "\\s*,\\s*"))
lst <- strsplit(vec, "\\s*=\\s*")
lst
setNames(sapply(lst, \(.x) trimws(.x[2])),
sapply(lst, \(.x) trimws(.x[1])))
'smo2_left = "SmO2 unfiltered",smo2_right = "SmO2 unfiltered"'
x = 'smo2_left = "SmO2 unfiltered",smo2_right = "SmO2 unfiltered"'
vec <- unlist(strsplit(x, "\\s*,\\s*"))
vec
vec <- unlist(strsplit(x, "\\s*,\\s*"))
lst <- strsplit(vec, "\\s*=\\s*")
lst
gsub('["\\\"]', '', x)
noquotes <- gsub('["\\\"]', '', x)
unlist(strsplit(noquotes, "\\s*,\\s*"))
split_vec <- unlist(strsplit(noquotes, "\\s*,\\s*"))
strsplit(split_vec, "\\s*=\\s*")
split_list <- strsplit(split_vec, "\\s*=\\s*")
setNames(sapply(split_list, \(.x) trimws(.x[2])),
sapply(split_list, \(.x) trimws(.x[1])))
test <- function(A) {
is.null(A) | missing(A) | A == 0
}
test <- function(A = NULL) {
is.null(A) | missing(A) | A == 0
}
test()
test <- function(A = NULL) {
is.TRUE(is.null(A) | missing(A) | A == 0)
}
test()
test <- function(A = NULL) {
isTRUE(is.null(A) | missing(A) | A == 0)
}
test()
test <- function(A) {
isTRUE(is.null(A) | missing(A) | A == 0)
}
test()
test <- function(A) {
isTRUE(missing(A) | is.null(A) | A == 0)
}
test()
test <- function(A) {
# isTRUE(missing(A) | is.null(A) | A == 0)
missing(A)
}
test()
test(A=NULL)
# isTRUE(missing(A) | is.null(A) | A == 0)
missing(A) | is.null(A) | A == 0
test <- function(A) {
# isTRUE(missing(A) | is.null(A) | A == 0)
missing(A) | is.null(A) | A == 0
}
test()
test <- function(A) {
# isTRUE(missing(A) | is.null(A) | A == 0)
is.null(A) | A == 0
}
test()
test(A=NULL)
test <- function(A) {
# isTRUE(missing(A) | is.null(A) | A == 0)
is.null(A)# | A == 0
}
test(A=NULL)
test <- function(A) {
isTRUE(is.null(A) | A == 0)
# is.null(A) | A == 0
}
test(A=NULL)
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
isFALSE(is.null(A) | is.numeric(A) | A > 0)
# is.null(A) | A == 0
}
test(A=NULL)
test(A="P")
test(A=0)
test(A=1)
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A) | A > 0)
is.null(A) | is.numeric(A) | A > 0
# is.null(A) | A == 0
}
test(A=1)
test(A=NULL)
test(A="P")
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A) | A > 0)
is.null(A) #| is.numeric(A) | A > 0
# is.null(A) | A == 0
}
test(A="P")
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A) | A > 0)
# is.null(A) |
is.numeric(A) #| A > 0
# is.null(A) | A == 0
}
test(A="QQ")
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A) | A > 0)
# is.null(A) |
# is.numeric(A) #|
A > 0
# is.null(A) | A == 0
}
test(A="QQ")
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A) | A > 0)
# is.null(A) |
# is.numeric(A) #|
is.numeric(A) > 0
# is.null(A) | A == 0
}
test(A="QQ")
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A) | A > 0)
# is.null(A) |
# is.numeric(A) #|
as.numeric(A)# > 0
# is.null(A) | A == 0
}
test(A="QQ")
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A) | A > 0)
# is.null(A) |
# is.numeric(A) #|
is.numeric(A)# > 0
# is.null(A) | A == 0
}
test(A="QQ")
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
isFALSE(is.null(A) | is.numeric(A))
# is.null(A) |
# is.numeric(A) #|
# is.numeric(A) > 0
# is.null(A) | A == 0
}
test(A="QQ")
test(A=NULL)
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A))
# is.null(A) |
# is.numeric(A) #|
# is.numeric(A) > 0
# is.null(A) | A == 0
!is.null(sample_rate) && (!is.numeric(sample_rate) || A <= 0)
}
test(A=NULL)
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A))
# is.null(A) |
# is.numeric(A) #|
# is.numeric(A) > 0
# is.null(A) | A == 0
!is.null(A) && (!is.numeric(A) || A <= 0)
}
test(A=NULL)
test(A=0)
test()
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A))
# is.null(A) |
# is.numeric(A) #|
# is.numeric(A) > 0
# is.null(A) | A == 0
!is.missing(A) && !is.null(A) && (!is.numeric(A) || A <= 0)
}
test()
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A))
# is.null(A) |
# is.numeric(A) #|
# is.numeric(A) > 0
# is.null(A) | A == 0
!missing(A) && !is.null(A) && (!is.numeric(A) || A <= 0)
}
test()
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A))
# is.null(A) |
# is.numeric(A) #|
# is.numeric(A) > 0
# is.null(A) | A == 0
!missing(A) && !is.null(A) && (!is.numeric(A) || A <= 0)
}
test()
test(A)
test(A=NULL)
test(A=NA)
test(A=0)
test(A=1)
test(A="0")
test <- function(A=NULL) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A))
# is.null(A) |
# is.numeric(A) #|
# is.numeric(A) > 0
# is.null(A) | A == 0
!is.null(A) && (!is.numeric(A) || A <= 0)
}
test()
test(A=1)
test(A=0)
test(A="0")
test <- function(A=NULL) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A))
# is.null(A) |
# is.numeric(A) #|
# is.numeric(A) > 0
# is.null(A) | A == 0
# !is.null(A) && (!is.numeric(A) || A <= 0)
is.null(A) || A == 0
}
test()
test(A = 1)
test(A = 0)
test(A = NULL)
test <- function(A=NULL) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A))
# is.null(A) |
# is.numeric(A) #|
# is.numeric(A) > 0
# is.null(A) | A == 0
# !is.null(A) && (!is.numeric(A) || A <= 0)
is.null(A) | A == 0
}
test(A = NULL)
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A))
# is.null(A) |
# is.numeric(A) #|
# is.numeric(A) > 0
# is.null(A) | A == 0
# !is.null(A) && (!is.numeric(A) || A <= 0)
missing(A) || A <= 0
}
test()
test(A=NULL)
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A))
# is.null(A) |
# is.numeric(A) #|
# is.numeric(A) > 0
# is.null(A) | A == 0
# !is.null(A) && (!is.numeric(A) || A <= 0)
missing(A) || is.null(A) || A <= 0
}
test(A=NULL)
test <- function(A) {
# isTRUE(is.null(A) | A == 0)
# isFALSE(is.null(A) | is.numeric(A))
# is.null(A) |
# is.numeric(A) #|
# is.numeric(A) > 0
# is.null(A) | A == 0
# !is.null(A) && (!is.numeric(A) || A <= 0)
missing(A) || A <= 0
}
test(A=NULL)
test(A=0)
test()
test(A=1)
