library(tidyverse)
library(JAPackage)
library(mNIRS)
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", W = 0.1),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass"),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", fc = 0.5, sr = 10),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", W = 0.1, fc = 0.5, sr = 10),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", fc = 0.5),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass"),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", sr = 10),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
test <- function(W=0.1, sr) {
W <- W
if (!(missing(fc) & missing(sr))) {
print("fc & sr are missing")
} else if ((missing(fc) | missing(sr)) & !(missing(W) | is.null(W))) {
print("either fc OR sr are missing")
} else {
print("what is this case?")
}
}
test()
test <- function(W=0.1, fc, sr) {
W <- W
if (!(missing(fc) & missing(sr))) {
print("fc & sr are missing")
} else if ((missing(fc) | missing(sr)) & !(missing(W) | is.null(W))) {
print("either fc OR sr are missing")
} else {
print("what is this case?")
}
}
test()
test <- function(W=0.1, fc, sr) {
W <- W
missing(fc)
missing(sr)
# if (!(missing(fc) & missing(sr))) {
#
#     print("fc & sr are missing")
#
# } else if ((missing(fc) | missing(sr)) & !(missing(W) | is.null(W))) {
#
#     print("either fc OR sr are missing")
#
# } else {
#
#     print("what is this case?")
# }
}
test()
test <- function(W=0.1, fc, sr) {
W <- W
print(missing(fc) )
print(missing(sr))
# if (!(missing(fc) & missing(sr))) {
#
#     print("fc & sr are missing")
#
# } else if ((missing(fc) | missing(sr)) & !(missing(W) | is.null(W))) {
#
#     print("either fc OR sr are missing")
#
# } else {
#
#     print("what is this case?")
# }
}
test()
test <- function(W=0.1, fc, sr) {
W <- W
print(missing(fc))
print(missing(sr))
if (!(missing(fc) & missing(sr))) {
print("fc & sr EXIST")
} else if ((missing(fc) | missing(sr)) & !(missing(W) | is.null(W))) {
print("either fc OR sr are missing")
} else if (missing(fc) & missing(sr)) {
print("fc & sr are MISSING")
}
}
test()
test <- function(W=0.1, fc, sr) {
W <- W
print(missing(fc))
print(missing(sr))
if (missing(fc) & missing(sr)) {
print("fc & sr are MISSING")
} else if (!(missing(fc) & missing(sr))) {
print("fc & sr EXIST")
} else if ((missing(fc) | missing(sr)) & !(missing(W) | is.null(W))) {
print("either fc OR sr are missing")
}
}
test()
test <- function(W=0.1, fc, sr) {
W <- W
print(missing(fc))
print(missing(sr))
if (!(missing(fc) & missing(sr))) {
print("fc & sr EXIST")
} else if ((missing(fc) | missing(sr)) & !(missing(W) | is.null(W))) {
print("either fc OR sr are missing")
} else if (missing(fc) & missing(sr)) {
print("fc & sr are MISSING")
}
}
test()
test(fc = 1, sr = 1)
test(fc = 1)
test <- function(W=0.1, fc, sr) {
W <- W
print(missing(fc))
print(missing(sr))
if (!missing(fc) & !missing(sr)) {
print("fc & sr EXIST")
} else if ((missing(fc) | missing(sr)) & !(missing(W) | is.null(W))) {
print("either fc OR sr are missing")
} else if (missing(fc) & missing(sr)) {
print("fc & sr are MISSING")
}
}
test(fc = 1)
test(fc = 1, sr = 1)
test(fc = 1)
test(W = NULL, fc = 1)
test <- function(W=0.1, fc, sr) {
W <- W
print(missing(fc))
print(missing(sr))
if (!missing(fc) & !missing(sr)) {
print("fc & sr EXIST")
} else if ((missing(fc) | missing(sr)) & !(missing(W) | is.null(W))) {
print("either fc OR sr are missing")
} else {
print("fc & sr are MISSING")
}
}
test(W = NULL, fc = 1)
#
library(tidyverse)
library(JAPackage)
library(mNIRS)
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", sr = 10),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", fc = 0.5, sr = 10),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", fc = 0.5, sr = NULL),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
}
#'
#' `method = "moving-average"` applies a centred (two-way symmetrical) moving
#' average filter from [zoo::rollapply()]. The moving-average is calculated
#' over a window of width `k`, an integer scalar specifying the number of
#' samples between `[i - floor(k/2), i + floor(k/2)]`. A partial moving-average
#' will be calculated at the edges of the existing data.
#'
#' @return A numeric vector of filtered data.
#'
#' @export
filter_data <- function(
x,
method = c("smooth-spline", "low-pass", "moving-average"),
spar = NULL,
n = 4,
W = 0.1,
fc,
sr,
k = 15,
...
) {
method <- match.arg(method)
W <- W
## pass through optional arguments
args <- list(...)
if (method == "smooth-spline") {
y <- stats::smooth.spline(x = x, spar = spar)$y
cli::cli_alert_info("Cubic smooth-spline: spar = {.val {spar}}.")
} else if (method == "low-pass") {
if (!(missing(fc) | is.null(fc)) & !(missing(sr) | is.null(sr))) {
y <- mNIRS::filtfilt_edges(x = x, n = n, W = fc / (sr/2))
cli::cli_alert_info(paste(
"Butterworth low-pass filter: n = {.val {n}},",
"fc = {.val {fc}}, sr = {.val {sr}}."))
} else if ((missing(fc) | missing(sr)) & !(missing(W) | is.null(W))) {
y <- mNIRS::filtfilt_edges(x = x, n = n, W = W)
cli::cli_alert_info(paste(
"Butterworth low-pass filter: n = {.val {n}},",
"W = {.val {W}}."))
} else {
cli::cli_abort(paste(
"Either {.arg W}, or {.arg fc} and {.arg sr}",
"must be specified for the Butterworth low-pass filter."))
}
} else if (method == "moving-average") {
y <- zoo::rollapply(
x, width = k, FUN = mean,
align = "center", partial = TRUE, na.rm = TRUE)
cli::cli_alert_info("Moving-average: k = {.val {k}}.")
}
return(y)
}
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", fc = 0.5, sr = NULL),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", fc = 0.5),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", fc = 0.5, sr = 10),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", fc = 0.5),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
#'
#' `method = "moving-average"` applies a centred (two-way symmetrical) moving
#' average filter from [zoo::rollapply()]. The moving-average is calculated
#' over a window of width `k`, an integer scalar specifying the number of
#' samples between `[i - floor(k/2), i + floor(k/2)]`. A partial moving-average
#' will be calculated at the edges of the existing data.
#'
#' @return A numeric vector of filtered data.
#'
#' @export
filter_data <- function(
x,
method = c("smooth-spline", "low-pass", "moving-average"),
spar = NULL,
n = 4,
W = 0.1,
fc,
sr,
k = 15,
...
) {
method <- match.arg(method)
W <- W
## pass through optional arguments
args <- list(...)
if (method == "smooth-spline") {
y <- stats::smooth.spline(x = x, spar = spar)$y
cli::cli_alert_info("Cubic smooth-spline: spar = {.val {spar}}.")
} else if (method == "low-pass") {
if (!missing(fc) & !missing(sr)) {
y <- mNIRS::filtfilt_edges(x = x, n = n, W = fc / (sr/2))
cli::cli_alert_info(paste(
"Butterworth low-pass filter: n = {.val {n}},",
"fc = {.val {fc}}, sr = {.val {sr}}."))
} else if ((missing(fc) | missing(sr)) & !(missing(W) | is.null(W))) {
y <- mNIRS::filtfilt_edges(x = x, n = n, W = W)
cli::cli_alert_info(paste(
"Butterworth low-pass filter: n = {.val {n}},",
"W = {.val {W}}."))
} else {
cli::cli_abort(paste(
"Either {.arg W}, or {.arg fc} and {.arg sr}",
"must be specified for the Butterworth low-pass filter."))
}
} else if (method == "moving-average") {
y <- zoo::rollapply(
x, width = k, FUN = mean,
align = "center", partial = TRUE, na.rm = TRUE)
cli::cli_alert_info("Moving-average: k = {.val {k}}.")
}
return(y)
}
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", fc = 0.5, sr = 10),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", fc = 0.5, sr = NULL),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
df <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Group Projects\EPL\Matt Fliss\matt pitshark.csv)",
nirs_columns = c("smo2_673" = "SmO2_673", "smo2_702" = "SmO2_702"),
sample_column = c("time" = "Timestamp (seconds passed)")
) |>
dplyr::mutate(
# smo2_filt = filter_data(
#     smo2_673, method = "smooth-spline", spar = 0.6),
# smo2_filt = filter_data(
#     smo2_673, method = "low-pass", n = 2, W = 0.01),
smo2_filt = filter_data(
smo2_673, method = "low-pass", fc = 0.5),
# smo2_filt = filter_data(
#     smo2_673, method = "moving-average", k = 50),
) |>
print()
