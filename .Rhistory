)
attributes(processed_data)
## troubleshooting =====================================
# library(tidyverse)
# library(JAPackage)
library(mNIRS)
#
raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\Body Position Study\Raw Data\SRLB02-Oxysoft-2024-12-20.xlsx)",
nirs_columns = c("ICG_VL" = "9", "ICG_SCM" = "10"),
sample_column = c("Sample" = "1"),
# event_column = c("Event" = "11"),
)
processed_data <- process_data(
.data = raw_data,
sample_rate = 50,
normalise_range = "column-wise",
filter_method = "moving-average"
)
processed_data <- process_data(
.data = raw_data,
sample_rate = 50,
normalise_range = "column-wise",
filter_method = "smooth-spline"
)
attributes(processed_data)
is.null(attributes(processed_data)$events_indices)
cli::cli_abort(paste(
"Data has no kinetics events identified. Indicate kinetics",
"events in {.fn process_data}"
))
cli::cli_abort(paste(
"Metadata has no kinetics events identified.",
"Indicate kinetics events in {.fn process_data}"
))
.data
processed_data
.data = processed_data
## validation: check for metadata to ensure `read_data()` has been run
if (is.null(attributes(.data)$nirs_columns)) {
cli::cli_abort(paste(
"Data should be extracted with {.fn read_data} before processing."
))
}
## validation: check for metadata to ensure `process_data()` has been run
if (is.null(attributes(processed_data)$events_indices)) {
cli::cli_abort(paste(
"Metadata has no kinetics events identified.",
"Indicate kinetics events in {.fn process_data} first."
))
}
cli::cli_abort(paste(
"{.arg remove_outliers} must be either {.val {TRUE}}",
"or {.val {FALSE}}, not {.val {remove_outliers}}."))
.data
attributes(.data)
metadata$nirs_columns
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
## Troubleshooting =======================================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
attributes(raw_data)
(processed_data <- process_data(
raw_data,
sample_rate = 1,
event_label = "end stage"
))
attributes(processed_data)
.data = processed_data
## validation: check for metadata to ensure `process_data()` has been run
if (is.null(attributes(processed_data)$events_indices)) {
cli::cli_abort(paste(
"Metadata has no kinetics events identified.",
"Indicate kinetics events in {.fn process_data} first."
))
}
## validation: check for metadata to ensure `process_data()` has been run
if (is.null(attributes(processed_data)$event_indices)) {
cli::cli_abort(paste(
"Metadata has no kinetics events identified.",
"Indicate kinetics events in {.fn process_data} first."
))
}
metadata <- attributes(.data)
nirs_columns <- metadata$nirs_columns
sample_column <- metadata$sample_column
event_column <- metadata$event_column
nirs_columns
## validation: inform message when end_kinetics_window set to default
if (is.null(end_kinetics_window)) {
end_kinetics_window <- min(round(kinetics_fit_window * 0.15/5)*5, 30)
cli::cli_alert_info(paste(
"{.arg end_kinetics_window} set to {.val {end_kinetics_window}}",
"samples"
))
}
end_kinetics_window = NULL
## validation: inform message when end_kinetics_window set to default
if (is.null(end_kinetics_window)) {
end_kinetics_window <- min(round(kinetics_fit_window * 0.15/5)*5, 30)
cli::cli_alert_info(paste(
"{.arg end_kinetics_window} set to {.val {end_kinetics_window}}",
"samples"
))
}
kinetics_fit_window
baseline_fit_window = 30
kinetics_fit_window = 180
baseline_display_window = 30
kinetics_display_window = 180
event_indices <- metadata$event_indices
event_indices
min(c(baseline_fit_window,
baseline_display_window))
min(c(kinetics_fit_window,
kinetics_display_window))
start_index <- min(c(baseline_fit_window,
baseline_display_window))
end_index <- min(c(kinetics_fit_window,
kinetics_display_window))
tibble::tibble(
start_index = event_indices - start_index,
end_index = event_indices + end_index,
)
tibble::tibble(
start_index = event_indices - start_index,
end_index = event_indices + end_index,
bout = seq_along(event_indices)
)
## split dataframes ==================================
purrr::pmap(
tibble::tibble(
start_index = event_indices - start_index,
end_index = event_indices + end_index,
),
\(start, end) {
.data |>
dplyr::filter(
dplyr::between(index, start, end)
)
}
)
## split dataframes ==================================
purrr::pmap(
tibble::tibble(
start_idx = event_indices - start_index,
end_idx = event_indices + end_index,
),
.data |>
dplyr::filter(
dplyr::between(index, start_idx, end_idx)
)
)
tibble::tibble(
start_idx = event_indices - start_index,
end_idx = event_indices + end_index,
)
## split dataframes ==================================
purrr::pmap(
tibble::tibble(
start_idx = event_indices - start_index,
end_idx = event_indices + end_index,
),
\()
.data |>
dplyr::filter(
dplyr::between(index, start_idx, end_idx)
)
)
tibble::tibble(
start_idx = event_indices - start_index,
end_idx = event_indices + end_index,
)
list(
start_idx = event_indices - start_index,
end_idx = event_indices + end_index,
)
list(
start_idx = event_indices - start_index,
end_idx = event_indices + end_index
)
## split dataframes ==================================
purrr::pmap(
list(
start_idx = event_indices - start_index,
end_idx = event_indices + end_index
),
\()
.data |>
dplyr::filter(
dplyr::between(index, start_idx, end_idx)
)
)
## split dataframes ==================================
purrr::pmap(
list(
start_idx = event_indices - start_index,
end_idx = event_indices + end_index
),
\(start_idx, end_idx)
.data |>
dplyr::filter(
dplyr::between(index, start_idx, end_idx)
)
)
## split dataframes ==================================
purrr::pmap(
list(
start_idx = event_indices - start_index,
end_idx = event_indices + end_index
),
\(start_idx, end_idx) {
.data |>
dplyr::filter(
dplyr::between(index, start_idx, end_idx)
)
})
df_list <- purrr::pmap(
list(
start_idx = event_indices - start_index,
end_idx = event_indices + end_index
),
\(start_idx, end_idx) {
.data |>
dplyr::filter(
dplyr::between(index, start_idx, end_idx)
)
})
df_list
nirs_columns
list(
df = df_list,
nirs = names(nirs_columns)
)
purrr::pmap(
list(
df = df_list,
nirs = names(nirs_columns)
),
\(df, nirs) {
df |>
summarise(
mean = mean(nirs, na.rm = TRUE),
)
})
list(
df = list(df_list),
nirs = names(nirs_columns)
)
purrr::pmap(
list(
df = list(df_list),
nirs = names(nirs_columns)
),
\(df, nirs) {
df |>
summarise(
mean = mean(nirs, na.rm = TRUE),
)
})
df |>
dplyr::summarise(
mean = mean(nirs, na.rm = TRUE),
)
purrr::pmap(
list(
df = list(df_list),
nirs = names(nirs_columns)
),
\(df, nirs) {
df |>
dplyr::summarise(
mean = mean(nirs, na.rm = TRUE),
)
})
purrr::pmap(
list(
df = list(df_list),
nirs = names(nirs_columns)
),
\(df, nirs) {
df #|>
# dplyr::summarise(
#     mean = mean(nirs, na.rm = TRUE),
# )
})
list(
df = list(df_list),
nirs = names(nirs_columns)
)
tibble::tibble(
df = list(df_list),
nirs = names(nirs_columns)
)
purrr::pmap(
tibble::tibble(
df = list(df_list),
nirs = names(nirs_columns)
),
\(df, nirs) {
unlist(df) #|>
# dplyr::summarise(
#     mean = mean(nirs, na.rm = TRUE),
# )
})
df[[1]] #|>
df[1] #|>
df[] #|>
df #|>
purrr::pmap(
tibble::tibble(
df = list(df_list),
nirs = names(nirs_columns)
),
\(df, nirs) {
df #|>
# dplyr::summarise(
#     mean = mean(nirs, na.rm = TRUE),
# )
})
purrr::pmap(
tibble::tibble(
df = list(df_list),
nirs = names(nirs_columns)
),
\(df, nirs) {
df[[1]] #|>
# dplyr::summarise(
#     mean = mean(nirs, na.rm = TRUE),
# )
})
purrr::pmap(
tibble::tibble(
df = list(df_list),
nirs = names(nirs_columns)
),
\(df, nirs) {
df[1] #|>
# dplyr::summarise(
#     mean = mean(nirs, na.rm = TRUE),
# )
})
tibble::tibble(
df = list(df_list),
nirs = names(nirs_columns)
)
tibble::tibble(
df = df_list,
nirs = list(names(nirs_columns))
)
df #|>
purrr::pmap(
tibble::tibble(
df = df_list,
nirs = list(names(nirs_columns))
),
\(df, nirs) {
df #|>
# dplyr::summarise(
#     mean = mean(nirs, na.rm = TRUE),
# )
})
purrr::pmap(
tibble::tibble(
df = df_list,
nirs = list(names(nirs_columns))
),
\(df, nirs) {
df |>
dplyr::summarise(
mean = mean(nirs, na.rm = TRUE),
)
})
nirs
purrr::pmap(
tibble::tibble(
df = df_list,
nirs = list(names(nirs_columns))
),
\(df, nirs) {
df |>
dplyr::summarise(
mean = mean({{ nirs }}, na.rm = TRUE),
)
})
purrr::pmap(
tibble::tibble(
df = df_list,
nirs = list(names(nirs_columns))
),
\(df, nirs) {
# df |>
#     dplyr::summarise(
#         mean = mean(nirs, na.rm = TRUE),
#     )
nirs
})
expand.grid(
df_list,
names(nirs_columns)
)
expand.grid(
df = df_list,
names(nirs_columns)
)
tibble::tibble(
df = df_list,
nirs = list(names(nirs_columns))
)
tibble::tibble(
df = df_list,
# nirs = list(names(nirs_columns))
)
tibble::tibble(
nirs = names(nirs_columns),
df = rlang::rep_along(df_list, nirs),
)
tibble::tibble(
nirs = names(nirs_columns),
# df = rlang::rep_along(df_list, nirs),
)
tibble::tibble(
nirs = names(nirs_columns),
df = rlang::rep_along(list(df_list), nirs),
)
tibble::tibble(
nirs = names(nirs_columns),
df = rlang::rep_along(list(df_list), nirs),
)
tibble::tibble(
nirs = names(nirs_columns),
df = rlang::rep_along(nirs, df_list),
)
tibble::tibble(
nirs = names(nirs_columns),
df = rlang::rep_along(nirs, list(df_list)),
)
tibble::tibble(
# nirs = names(nirs_columns),
# df = rlang::rep_along(nirs, list(df_list)),
df = df_list
)
tibble::expand_grid(
nirs = names(nirs_columns),
# df = rlang::rep_along(nirs, list(df_list)),
df = df_list,
)
::expand_grid(
tidyr::expand_grid(
nirs = names(nirs_columns),
# df = rlang::rep_along(nirs, list(df_list)),
df = df_list,
)
tidyr::expand_grid(
df = df_list,
nirs = names(nirs_columns),
)
purrr::pmap(
tidyr::expand_grid(
df = df_list,
nirs = names(nirs_columns),
),
\(df, nirs) {
# df |>
#     dplyr::summarise(
#         mean = mean(nirs, na.rm = TRUE),
#     )
nirs
})
purrr::pmap(
tidyr::expand_grid(
df = df_list,
nirs = names(nirs_columns),
),
\(df, nirs) {
df |>
dplyr::summarise(
mean = mean(nirs, na.rm = TRUE),
)
})
purrr::pmap(
tidyr::expand_grid(
df = df_list,
nirs = names(nirs_columns),
),
\(df, nirs) {
df |>
dplyr::summarise(
mean = mean(get(nirs), na.rm = TRUE),
)
})
purrr::pmap(
tidyr::expand_grid(
df = df_list,
nirs = names(nirs_columns),
),
\(df, nirs) {
df |>
dplyr::summarise(
dplyr::across(
dplyr::any_of(nirs),
~ mean(., na.rm = TRUE)),
)
})
