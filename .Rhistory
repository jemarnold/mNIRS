sample_rate = NULL,
resample_rate = NULL, ## 10 Hz
resample_time = NULL, ## 0.01 s
...
) {
## pass through =============================
if (is.null(resample_rate) & is.null(resample_time)) {
return(data)
}
## Validation =================================
metadata <- attributes(data)
args <- list(...)
## define `sample_column`
## priority is manually defined
if (
(missing(sample_column) | is.null(sample_column)) &
!is.null(metadata$sample_column)
) {
sample_column <- metadata$sample_column
}
## validation: `sample_column` must match expected dataframe names
if (!all(unlist(sample_column) %in% names(data))) {
cli::cli_abort(paste(
"{.arg sample_column} not found. Make sure column names",
"match exactly."))
}
sample_vector <- as.numeric(data[[sample_column]])
## define `sample_rate`
## priority is manually defined
if (
(missing(sample_rate) | is.null(sample_rate)) &
!is.null(metadata$sample_rate)
) {
sample_rate <- metadata$sample_rate
} else if (missing(sample_rate) | is.null(sample_rate)) {
## samples per second
sample_rate <- head(diff(sample_vector), 100) |>
mean(na.rm = TRUE) |>
(\(.x) round((1/.x)/0.5)*0.5)()
}
cli::cli_alert_info(paste(
"Estimated sample rate is {.val {sample_rate}} Hz.",
"Overwrite this by re-running with {.arg sample_rate = X}"
))
#
## Processing ===================================
y <- data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
\(.x) if (!is.null(resample_rate) & is.null(resample_time)) {
floor(.x * resample_rate) / resample_rate
} else if (!is.null(resample_time) & is.null(resample_rate)) {
floor(.x / resample_time) * resample_time
} else {
cli::cli_abort(paste(
"Either {.arg sample_rate} or {.arg sample_time} should",
"be defined, not both."))
})
) |>
dplyr::summarise(
.by = dplyr::any_of(sample_column),
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample) |>
dplyr::full_join(
tibble::tibble(
!!sample_column := seq(
floor(min(sample_vector, na.rm = TRUE)
* sample_rate) / sample_rate,
ceiling(max(sample_vector, na.rm = TRUE)
* sample_rate) / sample_rate,
by = if (!is.null(resample_rate) &
is.null(resample_time)) {
1 / resample_rate
} else if (!is.null(resample_time) &
is.null(resample_rate)) {
resample_time
})
),
by = sample_column
) |>
dplyr::arrange(dplyr::pick(dplyr::any_of(sample_column))) |>
dplyr::mutate(
dplyr::across(
where(is.numeric),
\(.x) mNIRS::replace_missing_values(
.x, method = "linear", na.rm = TRUE)$y),
)
## TODO CONTINUE
#
## Metadata =================================
metadata$sample_column <- unlist(sample_column)
y <- create_mnirs_data(y, metadata)
return(y)
}
# attributes(data)
#
(y <- resample_dataframe(
data = data,
# sample_column = "time",
resample_rate = 1, ## 10 Hz
resample_time = NULL,
# nirs_columns,
))
#
(data <- mNIRS::read_data(
file_path = "C:/OneDrive - UBC/Body Position Study/Raw Data/BP01-Train.Red-2025-04-01.csv",
nirs_columns = c("smo2_left" = "SmO2 unfiltered",
"HHb_left" = "HHb unfiltered",
"O2Hb_left" = "O2HB unfiltered",
"smo2_right" = "SmO2 unfiltered"),
sample_column = c("time" = "Timestamp (seconds passed)"),
event_column = c("Lap" = "Lap/Event")))
# attributes(data)
#
(y <- resample_dataframe(
data = data,
# sample_column = "time",
resample_rate = 1, ## 10 Hz
resample_time = NULL,
# nirs_columns,
))
# attributes(data)
#
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
resample_rate = 1, ## 10 Hz
resample_time = NULL,
# nirs_columns,
))
# attributes(data)
#
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
resample_rate = 1, ## 10 Hz
resample_time = NULL,
# nirs_columns,
))
# attributes(data)
#
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
resample_rate = 100, ## 10 Hz
resample_time = NULL,
# nirs_columns,
))
# attributes(data)
#
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
# resample_rate = 100, ## 10 Hz
resample_time = 0.1,
# nirs_columns,
))
#
(data <- mNIRS::read_data(
file_path = "C:/OneDrive - UBC/Body Position Study/Raw Data/BP01-Train.Red-2025-04-01.csv",
nirs_columns = c("smo2_left" = "SmO2 unfiltered",
"HHb_left" = "HHb unfiltered",
"O2Hb_left" = "O2HB unfiltered",
"smo2_right" = "SmO2 unfiltered"),
sample_column = c("time" = "Timestamp (seconds passed)"),
event_column = c("Lap" = "Lap/Event")))
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
# resample_rate = 100, ## 10 Hz
resample_time = 0.1,
# nirs_columns,
))
attributes(y)
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
# resample_rate = 100, ## 10 Hz
resample_time = 1,
# nirs_columns,
))
attributes(y)
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
# resample_rate = 100, ## 10 Hz
resample_time = 0.01,
# nirs_columns,
))
attributes(y)
30*1024^2
c(resample_rate, resample_time) == 0
resample_time=1
resample_rate=1
c(resample_rate, resample_time) == 0
any(c(resample_rate, resample_time) == 0)
resample_rate=0
any(c(resample_rate, resample_time) == 0)
tibble::tibble(A = 1:10) |>
dplyr::pull(index = dplyr::row_number())
tibble::tibble(A = 1:10) |>
dplyr::pull(dplyr::row_number())
tibble::tibble(A = 1:10) |>
dplyr::row_number()
#| context: setup
suppressPackageStartupMessages({
# library(JAPackage)
library(glue)
library(bslib)
# library(plotly)
# library(ggpubr)
library(shiny)
# library(readxl)
library(DT)
library(mNIRS)
library(tidyverse)
})
options(digits = 5, digits.secs = 3, scipen = 3,
dplyr.summarise.inform = FALSE,
tibble.print_min = 20,
shiny.maxRequestSize=50*1024^2)
text_size <- 12
theme_set(
theme_bw(base_size = text_size, base_family = "Merriweather Sans") +
theme(
text = element_text(colour = "black"),
plot.title = ggtext::element_textbox(size = rel(1.2), lineheight = 1.1),
plot.subtitle = ggtext::element_textbox(lineheight = 1.1),
plot.caption = ggtext::element_textbox(colour = "grey50", halign = 1),
panel.border = element_blank(),
axis.line = element_line(),
# panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = rel(1.2), face = "bold"),
legend.position = "none",
legend.justification = "right",
legend.margin = margin(rep(1, 4)),
legend.box.spacing = unit(text_size/4, "pt"),
strip.background = element_rect(fill = "grey95"),
strip.text = element_text(margin = margin(rep(text_size/4, 4))),
))
string_to_named_vector <- function(x) {
vec <- unlist(strsplit(x, "\\s*,\\s*"))
lst <- strsplit(vec, "\\s*=\\s*")
setNames(sapply(lst, \(.x) trimws(.x[2])),
sapply(lst, \(.x) trimws(.x[1])))
}
string_to_named_vector("event = ..9")
string_to_named_vector("event = `..9`")
mNIRS::read_data(
r"(C:\OneDrive - UBC\Body Position Study\Raw Data\Eva-pilot-Oxy-2025-05-27.xlsx)",
nirs_columns = c("VLO" = "5", "VLH" = "6"),
sample_column = c("sample" = "1")
)
mNIRS::read_data(
r"(C:\OneDrive - UBC\Body Position Study\Raw Data\Eva-pilot-Oxy-2025-05-27.xlsx)",
nirs_columns = c("VLO" = "5", "VLH" = "6"),
sample_column = c("sample" = "1"),
event_column = c("event" = "..9")
)
mNIRS::read_data(
r"(C:\OneDrive - UBC\Body Position Study\Raw Data\Eva-pilot-Oxy-2025-05-27.xlsx)",
nirs_columns = c("VLO" = "5", "VLH" = "6"),
sample_column = c("sample" = "1"),
event_column = c("event" = "...9")
)
mNIRS::read_data(
r"(C:\OneDrive - UBC\Body Position Study\Raw Data\Eva-pilot-Oxy-2025-05-27.xlsx)",
nirs_columns = c("VLO" = "5", "VLH" = "6"),
sample_column = c("sample" = "1"),
event_column = c("event" = "...9")
) |>
filter(!is.na(event))
devtools::install_github("r4ds/shinyfocus")
install.packages("devtools")
devtools::install_github("r4ds/shinyfocus")
devtools::install_github("r4ds/shinyfocus")
remove.packages("shinyfocus")
#
# (data <- mNIRS::read_data(
#     file_path = "C:/OneDrive - UBC/Body Position Study/Raw Data/BP01-Train.Red-2025-04-01.csv",
#     nirs_columns = c("smo2_left" = "SmO2 unfiltered",
#                      "HHb_left" = "HHb unfiltered",
#                      "O2Hb_left" = "O2HB unfiltered",
#                      "smo2_right" = "SmO2 unfiltered"),
#     sample_column = c("time" = "Timestamp (seconds passed)"),
#     event_column = c("Lap" = "Lap/Event")))
(data <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Body Position Study\Raw Data\Eva-pilot-Oxy-2025-05-27.xlsx)",
nirs_columns = c(VL_O2Hb = 5, VL_HHb = 6),
sample_column = c(sample = 1),
# event_column = c(event = "...11"),
.keep_all = FALSE))
# # attributes(data)
#
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
resample_rate = 1, ## 10 Hz
# resample_time = 0.01,
# nirs_columns,
))
y$sample
floor(y$sample * resample_rate)
resample_rate = 1
sample_rate = 50
# attributes(y)
y |>
dplyr::mutate(
dplyr::across(
sample,
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
sample,
\(.x) floor(.x * resample_rate) / resample_rate),
)
# attributes(y)
y |>
dplyr::mutate(
dplyr::across(
sample,
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
sample,
\(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
)
# attributes(y)
y |>
dplyr::mutate(
dplyr::across(
sample,
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
sample,
\(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
) |>
print(n=100)
# attributes(y)
y |>
dplyr::mutate(
dplyr::across(
sample,
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
sample,
\(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
) |>
print(n=103)
# attributes(y)
y |>
dplyr::mutate(
dplyr::across(
sample,
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
sample,
\(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
) |>
dplyr::summarise(
.by = sample,
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
print(n=103)
166419/50
dplyr::select(-delta_sample) |>
# dplyr::full_join(
#     tibble::tibble(
#         sample = seq(
#             floor(min(sample_vector, na.rm = TRUE)
#                   * sample_rate) / sample_rate,
#             ceiling(max(sample_vector, na.rm = TRUE)
#                     * sample_rate) / sample_rate,
#             by = 1 / resample_rate),
#     ),
#     by = "sample"
# ) |>
# dplyr::arrange(dplyr::pick(dplyr::any_of(sample_column))) |>
dplyr::mutate(
dplyr::across(
where(is.numeric),
\(.x) mNIRS::replace_missing_values(
.x, method = "linear", na.rm = TRUE)$y),
)
# attributes(y)
y |>
dplyr::mutate(
dplyr::across(
sample,
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
sample,
\(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
) |>
dplyr::summarise(
.by = sample,
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
# print(n=103)
dplyr::select(-delta_sample) |>
# dplyr::full_join(
#     tibble::tibble(
#         sample = seq(
#             floor(min(sample_vector, na.rm = TRUE)
#                   * sample_rate) / sample_rate,
#             ceiling(max(sample_vector, na.rm = TRUE)
#                     * sample_rate) / sample_rate,
#             by = 1 / resample_rate),
#     ),
#     by = "sample"
# ) |>
# dplyr::arrange(dplyr::pick(dplyr::any_of(sample_column))) |>
# dplyr::mutate(
#     dplyr::across(
#         where(is.numeric),
#         \(.x) mNIRS::replace_missing_values(
#             .x, method = "linear", na.rm = TRUE)$y),
# )
print(n=103)
(data <- mNIRS::read_data(
file_path = "C:/OneDrive - UBC/Body Position Study/Raw Data/BP01-Train.Red-2025-04-01.csv",
nirs_columns = c("smo2_left" = "SmO2 unfiltered",
"HHb_left" = "HHb unfiltered",
"O2Hb_left" = "O2HB unfiltered",
"smo2_right" = "SmO2 unfiltered"),
sample_column = c("time" = "Timestamp (seconds passed)"),
event_column = c("Lap" = "Lap/Event")))
#
# (data <- mNIRS::read_data(
#     file_path = "C:/OneDrive - UBC/Body Position Study/Raw Data/BP01-Train.Red-2025-04-01.csv",
#     nirs_columns = c("smo2_left" = "SmO2 unfiltered",
#                      "HHb_left" = "HHb unfiltered",
#                      "O2Hb_left" = "O2HB unfiltered",
#                      "smo2_right" = "SmO2 unfiltered"),
#     sample_column = c("time" = "Timestamp (seconds passed)"),
#     event_column = c("Lap" = "Lap/Event")))
(data <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Body Position Study\Raw Data\Eva-pilot-Oxy-2025-05-27.xlsx)",
nirs_columns = c(VL_O2Hb = 5, VL_HHb = 6),
sample_column = c(sample = 1),
# event_column = c(event = "...11"),
.keep_all = FALSE))
# # attributes(data)
#
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 50,
resample_rate = 1, ## 10 Hz
# resample_time = 0.01
))
attributes(y)
attributes(data)
#
library(ggplot2)
library(JAPackage)
ggplot(y) +
{list( ## Settings
aes(x = sample, y = VL_O2Hb),
# coord_cartesian(
#     xlim = c(NA, 20),
#     ylim = c(0, 40)),
theme_JA(),
NULL)} + ## Settings
{list( ## Data
geom_line(),
# geom_point(),
NULL)} ## Data
ggplot(data) +
{list( ## Settings
aes(x = sample, y = VL_O2Hb),
# coord_cartesian(
#     xlim = c(NA, 20),
#     ylim = c(0, 40)),
theme_JA(),
NULL)} + ## Settings
{list( ## Data
geom_line(),
# geom_point(),
NULL)} ## Data
