"should be of length 2 or greater")
## two values
result <- peak_directional_slope(c(1, 3), width = 3)
expect_type(result$slope, "double")
expect_gte(result$x, 1)
expect_lte(result$x, 2)
## all identical values
y_flat <- rep(5, 10)
result <- peak_directional_slope(y_flat, width = 3)
expect_equal(result$slope, 0)
expect_gte(result$x, 1)
## all NA
expect_error(
peak_directional_slope(rep(NA, 5), width = 3, na.rm = TRUE),
"should contain at least 2 or more non-NA values")
})
suppressPackageStartupMessages({
library(JAPackage)
library(mNIRS)
library(tidyverse)
})
devtools::load_all()
options(digits = 5, digits.secs = 3, scipen = 3,
dplyr.summarise.inform = FALSE,
tibble.print_min = 20)
# camcorder::gg_record(
#   dir = "ggplots",
#   width = 220,
#   height = 220*2/3,
#   dpi = 300,
#   units = "mm",
#   device = "png",
#   bg = "white")
# camcorder::gg_stop_recording()
#
# Generate sample data
set.seed(13)
true_x <- seq(0, 60, by = 2)
true_A <- 10
true_B <- 100
true_TD <- 15
true_tau <- 8
true_y <- monoexponential(true_x, true_A, true_B, true_TD, true_tau)
true_y <- true_y + rnorm(length(true_x), 0, 3)  # Add noise
## singular_data
{
singular_data <- tibble(
xs = -30:180,
ys = c(21.49, 21.73, 21.84, 21.72, 21.6, 21.79, 21.97, 22.13, 22.04,
22.01, 21.91, 21.82, 21.74, 21.81, 21.84, 21.74, 21.46, 21.36,
21.35, 21.36, 21.44, 21.32, 21.36, 21.5, 21.69, 21.77, 21.86,
22, 21.82, 21.67, 21.79, 21.74, 21.35, 21.3, 21.36, 21.34, 21.22,
20.93, 20.81, 20.78, 20.73, 20.58, 20.55, 20.48, 20.47, 20.4,
20.28, 20.25, 20.26, 20.26, 20.29, 20.15, 20.27, 20.19, 20.14,
19.96, 19.97, 19.95, 19.95, 19.96, 19.94, 19.9, 19.92, 19.92,
19.9, 19.86, 19.84, 19.88, 19.87, 19.91, 19.93, 19.83, 19.99,
20.06, 19.83, 19.96, 19.89, 19.98, 19.91, 19.97, 19.98, 19.97,
19.98, 20.02, 20.05, 20.18, 20.1, 20.13, 20.12, 20.16, 20.16,
20.18, 20.24, 20.24, 20.31, 20.35, 20.24, 20.41, 20.41, 20.46,
20.45, 20.51, 20.58, 20.62, 20.55, 20.6, 20.55, 20.65, 20.63,
20.6, 20.56, 20.52, 20.5, 20.48, 20.38, 20.31, 20.3, 20.27, 20.22,
20.27, 20.12, 20.18, 20.18, 20.16, 20.16, 20.19, 20.27, 20.15,
20.23, 20.27, 20.32, 20.2, 20.23, 20.25, 20.26, 20.32, 20.31,
20.25, 20.34, 20.27, 20.23, 20.35, 20.33, 20.41, 20.34, 20.4,
20.4, 20.36, 20.43, 20.34, 20.38, 20.36, 20.35, 20.49, 20.45,
20.44, 20.49, 20.5, 20.59, 20.56, 20.42, 20.45, 20.43, 20.46,
20.42, 20.48, 20.46, 20.57, 20.58, 20.58, 20.6, 20.64, 20.69,
20.69, 20.7, 20.7, 20.68, 20.61, 20.58, 20.52, 20.46, 20.45,
20.42, 20.47, 20.62, 20.67, 20.69, 20.74, 20.7, 20.69, 20.7,
20.73, 20.65, 20.63, 20.6, 20.68, 20.62, 20.65, 20.71, 20.78,
20.65, 20.7, 20.76, 20.81, 20.79, 20.82, 20.86, 20.94, 20.91,
20.84, 20.93),
)
} ## singular_data
true_data <- tibble(xcol = true_x, ycol = true_y)
plot <- ggplot(true_data) +
{list( ## Settings
aes(xcol, ycol),
scale_y_continuous(
# limits = c(0, NA),
breaks = scales::breaks_pretty(),
),
theme_JA(),
NULL)} + ## Settings
{list( ## Data
geom_hline(yintercept = 10, linetype = "dotted"),
geom_line(),
geom_point(),
NULL)} ## Data
plot
#
# process_kinetics_test(
process_kinetics(
# x = true_data$x,
# y = true_data$y,
x = true_x,
y = true_y,
# x = "xcol",
# y = "ycol",
# x = xcol,
# y = ycol, #error
# data = true_data,
x0 = 8, #true_x[8],
method = "peak_slope",
width = 10
# B = 100,
)3 |> plot()
# process_kinetics_test(
process_kinetics(
# x = true_data$x,
# y = true_data$y,
x = true_x,
y = true_y,
# x = "xcol",
# y = "ycol",
# x = xcol,
# y = ycol, #error
# data = true_data,
x0 = 8, #true_x[8],
method = "peak_slope",
width = 10
# B = 100,
)# |> plot()
# process_kinetics_test(
process_kinetics(
# x = true_data$x,
# y = true_data$y,
x = true_x,
y = true_y,
# x = "xcol",
# y = "ycol",
# x = xcol,
# y = ycol, #error
# data = true_data,
x0 = 8, #truea_x[8],
method = "peak_slope",
width = 10
# B = 100,
) |> plot()
true_x
true_x + rnorm(length(true_x), sd = 0.04)
# process_kinetics_test(
process_kinetics(
# x = true_data$x,
# y = true_data$y,
x = true_x + rnorm(length(true_x), sd = 0.04),
y = true_y,
# x = "xcol",
# y = "ycol",
# x = xcol,
# y = ycol, #error
# data = true_data,
x0 = 8, #truea_x[8],
method = "peak_slope",
width = 10
# B = 100,
)# |> plot()
# process_kinetics_test(
process_kinetics(
# x = true_data$x,
# y = true_data$y,
x = true_x + rnorm(length(true_x), sd = 0.04),
y = true_y,
# x = "xcol",
# y = "ycol",
# x = xcol,
# y = ycol, #error
# data = true_data,
x0 = 8, #truea_x[8],
method = "peak_slope",
width = 10
# B = 100,
) |> plot()
# process_kinetics_test(
process_kinetics(
# x = true_data$x,
# y = true_data$y,
x = true_x,
y = true_y,
# x = "xcol",
# y = "ycol",
# x = xcol,
# y = ycol, #error
# data = true_data,
x0 = 8, #truea_x[8],
method = "peak_slope",
width = 10
# B = 100,
) |> plot()
# process_kinetics_test(
process_kinetics(
# x = true_data$x,
# y = true_data$y,
x = true_x,
y = true_y,
# x = "xcol",
# y = "ycol",
# x = xcol,
# y = ycol, #error
# data = true_data,
x0 = 8, #truea_x[8],
method = "peak_slope",
width = 10
# B = 100,
)# |> plot()
# process_kinetics_test(
process_kinetics(
# x = true_data$x,
# y = true_data$y,
x = true_x,
y = true_y,
# x = "xcol",
# y = "ycol",
# x = xcol,
# y = ycol, #error
# data = true_data,
x0 = 8, #truea_x[8],
method = "peak_slope",
width = 10
# B = 100,
) |> plot()
devtools::load_all()
# process_kinetics_test(
process_kinetics(
# x = true_data$x,
# y = true_data$y,
x = true_x,
y = true_y,
# x = "xcol",
# y = "ycol",
# x = xcol,
# y = ycol, #error
# data = true_data,
x0 = 8, #truea_x[8],
method = "peak_slope",
width = 10
# B = 100,
) |> plot()
usethis::use_import_from("ggplot2", c("scale_colour_discrete"))
suppressPackageStartupMessages({
library(JAPackage)
library(mNIRS)
library(tidyverse)
})
devtools::load_all()
options(digits = 5, digits.secs = 3, scipen = 3,
dplyr.summarise.inform = FALSE,
tibble.print_min = 20)
# camcorder::gg_record(
#   dir = "ggplots",
#   width = 220,
#   height = 220*2/3,
#   dpi = 300,
#   units = "mm",
#   device = "png",
#   bg = "white")
# camcorder::gg_stop_recording()
#
# Generate sample data
set.seed(13)
true_x <- seq(0, 60, by = 2)
true_A <- 10
true_B <- 100
true_TD <- 15
true_tau <- 8
true_y <- monoexponential(true_x, true_A, true_B, true_TD, true_tau)
true_y <- true_y + rnorm(length(true_x), 0, 3)  # Add noise
## singular_data
{
singular_data <- tibble(
xs = -30:180,
ys = c(21.49, 21.73, 21.84, 21.72, 21.6, 21.79, 21.97, 22.13, 22.04,
22.01, 21.91, 21.82, 21.74, 21.81, 21.84, 21.74, 21.46, 21.36,
21.35, 21.36, 21.44, 21.32, 21.36, 21.5, 21.69, 21.77, 21.86,
22, 21.82, 21.67, 21.79, 21.74, 21.35, 21.3, 21.36, 21.34, 21.22,
20.93, 20.81, 20.78, 20.73, 20.58, 20.55, 20.48, 20.47, 20.4,
20.28, 20.25, 20.26, 20.26, 20.29, 20.15, 20.27, 20.19, 20.14,
19.96, 19.97, 19.95, 19.95, 19.96, 19.94, 19.9, 19.92, 19.92,
19.9, 19.86, 19.84, 19.88, 19.87, 19.91, 19.93, 19.83, 19.99,
20.06, 19.83, 19.96, 19.89, 19.98, 19.91, 19.97, 19.98, 19.97,
19.98, 20.02, 20.05, 20.18, 20.1, 20.13, 20.12, 20.16, 20.16,
20.18, 20.24, 20.24, 20.31, 20.35, 20.24, 20.41, 20.41, 20.46,
20.45, 20.51, 20.58, 20.62, 20.55, 20.6, 20.55, 20.65, 20.63,
20.6, 20.56, 20.52, 20.5, 20.48, 20.38, 20.31, 20.3, 20.27, 20.22,
20.27, 20.12, 20.18, 20.18, 20.16, 20.16, 20.19, 20.27, 20.15,
20.23, 20.27, 20.32, 20.2, 20.23, 20.25, 20.26, 20.32, 20.31,
20.25, 20.34, 20.27, 20.23, 20.35, 20.33, 20.41, 20.34, 20.4,
20.4, 20.36, 20.43, 20.34, 20.38, 20.36, 20.35, 20.49, 20.45,
20.44, 20.49, 20.5, 20.59, 20.56, 20.42, 20.45, 20.43, 20.46,
20.42, 20.48, 20.46, 20.57, 20.58, 20.58, 20.6, 20.64, 20.69,
20.69, 20.7, 20.7, 20.68, 20.61, 20.58, 20.52, 20.46, 20.45,
20.42, 20.47, 20.62, 20.67, 20.69, 20.74, 20.7, 20.69, 20.7,
20.73, 20.65, 20.63, 20.6, 20.68, 20.62, 20.65, 20.71, 20.78,
20.65, 20.7, 20.76, 20.81, 20.79, 20.82, 20.86, 20.94, 20.91,
20.84, 20.93),
)
} ## singular_data
true_data <- tibble(xcol = true_x, ycol = true_y)
plot <- ggplot(true_data) +
{list( ## Settings
aes(xcol, ycol),
scale_y_continuous(
# limits = c(0, NA),
breaks = scales::breaks_pretty(),
),
theme_JA(),
NULL)} + ## Settings
{list( ## Data
geom_hline(yintercept = 10, linetype = "dotted"),
geom_line(),
geom_point(),
NULL)} ## Data
plot
#
# process_kinetics_test(
process_kinetics(
# x = true_data$x,
# y = true_data$y,
x = true_x,
y = true_y,
# x = "xcol",
# y = "ycol",
# x = xcol,
# y = ycol, #error
# data = true_data,
x0 = 8, #truea_x[8],
method = "peak_slope",
width = 10
# B = 100,
) |> plot()
# process_kinetics_test(
process_kinetics(
# x = true_data$x,
# y = true_data$y,
x = true_x,
y = true_y,
# x = "xcol",
# y = "ycol",
# x = xcol,
# y = ycol, #error
# data = true_data,
x0 = 8, #truea_x[8],
method = "peak_slope",
width = 10
# B = 100,
) |> plot()
# process_kinetics_test(
process_kinetics(
# x = true_data$x,
# y = true_data$y,
x = true_x,
y = true_y,
# x = "xcol",
# y = "ycol",
# x = xcol,
# y = ycol, #error
# data = true_data,
x0 = 8, #truea_x[8],
method = "peak_slope",
width = 10
# B = 100,
) |> plot()
vignette("processing-mNIRS-data", package = "quarto")
usethis::use_vignette("processing-mNIRS-data.qmd")
file_path <- system.file("extdata/moxy_ramp_example.xlsx",
package = "mNIRS")
moxy_data <- read_data(file_path,
nirs_columns = c(smo2_left = "SmO2 Live",
smo2_right = "SmO2 Live(2)"),
sample_column = c(time = "hh:mm:ss"),
event_column = c(lap = "Lap"),
sample_rate = 2,
numeric_time = TRUE,
keep_all = FALSE,
verbose = TRUE)
print(oxy_data)
moxy_data <- read_data(file_path,
nirs_columns = c(smo2_left = "SmO2 Live",
smo2_right = "SmO2 Live(2)"),
sample_column = c(time = "hh:mm:ss"),
event_column = c(lap = "Lap"),
sample_rate = 2,
numeric_time = TRUE,
keep_all = FALSE,
verbose = TRUE)
print(moxy_data)
#| label: setup
library(dplyr)
# library(ggplot2)
# library(purrr)
# library(tidyverse)
# library(tidyr)
library(mNIRS)
# devtools::install_github("jemarnold/mNIRS") ## install development version
file_path <- system.file("extdata/moxy_ramp_example.xlsx",
package = "mNIRS")
moxy_data <- read_data(file_path,
nirs_columns = c(smo2_left = "SmO2 Live",
smo2_right = "SmO2 Live(2)"),
sample_column = c(time = "hh:mm:ss"),
event_column = c(lap = "Lap"),
sample_rate = 2,
numeric_time = TRUE,
keep_all = FALSE,
verbose = TRUE)
print(moxy_data)
plot(moxy_data)
?read_data
oxy_path <- system.file("extdata", "oxysoft_interval_example.xlsx",
package = "mNIRS")
oxy_data <- read_data(oxy_path,
nirs_columns = c(VL_HHb = "6"),
sample_column = c(time = "1"),
event_column = c(event = "11"),
sample_rate = 50, ## oxysoft sample rate
keep_all = FALSE,
verbose = TRUE)
devtools::load_all()
usethis::use_vignette("processing-mNIRS-data.qmd")
1/0.2
plot(data_filtered) |> str()
#| label: setup
#| warning: false
library(dplyr)
library(ggplot2)
library(mNIRS)
# devtools::install_github("jemarnold/mNIRS") ## install development version
file_path <- system.file("extdata/moxy_ramp_example.xlsx", package = "mNIRS")
# Chunk 1: setup
#| label: setup
#| warning: false
library(dplyr)
library(ggplot2)
library(mNIRS)
# devtools::install_github("jemarnold/mNIRS") ## install development version
# Chunk 2
file_path <- system.file("extdata/moxy_ramp_example.xlsx", package = "mNIRS")
# Chunk 3
data_raw <- read_data(file_path,
nirs_columns = c(smo2_left = "SmO2 Live",
smo2_right = "SmO2 Live(2)"),
sample_column = c(time = "hh:mm:ss"),
event_column = c(lap = "Lap"),
sample_rate = 2, ## we know this file is recorded at 2 samples per second
numeric_time = TRUE, ## to convert the date-time string to numeric
keep_all = FALSE, ## to keep the returned dataframe clean
verbose = TRUE) ## show warnings & messages, but ignore them for now
data_raw
# Chunk 4
data_time_fixed <- data_raw |>
mutate(time = time - first(time))
plot(data_time_fixed)
# Chunk 5
nirs_columns <- attributes(data_raw)$nirs_columns
nirs_columns
sample_rate <- attributes(data_raw)$sample_rate
sample_rate
# Chunk 6
data_cleaned <- data_time_fixed |>
mutate(
across(any_of(nirs_columns), ## apply function across all of our `nirs_columns`
\(.x) replace_outliers(x = .x,
width = 20 * sample_rate, ## 20 sec window
na.rm = TRUE, ## ignore `NA`
return = "median")
),
across(any_of(nirs_columns),
\(.x) replace_fixed_values(x = .x,
fixed_values = c(0, 100), ## known invalid values
width = 20 * sample_rate,
return = "NA")
),
across(any_of(nirs_columns),
\(.x) replace_missing_values(x = .x,
method = "linear", ## linear interpolation
na.rm = FALSE, ## to preserve the length of the vector
maxgap = Inf) ## interpolate across gaps of any length
),
)
plot(data_cleaned)
# Chunk 7
data_downsampled <- data_cleaned |>
downsample_data(downsample_time = 10)
data_downsampled
plot(data_downsampled)
data_filtered <- data_cleaned |>
mutate(
across(any_of(nirs_columns),
\(.x) filter_data(x = .x,
method = "smooth-spline"),
.names = "{.col}_filt"
)
)
plot(data_filtered) |> str() +
geom_line(aes(y = smo2_left_filt, colour = "smo2_left"), linewidth = 1) +
geom_line(aes(y = smo2_right_filt, colour = "smo2_right"), linewidth = 1)
plot(data_filtered)$layers
plot(data_filtered)$layers[[2]]
plot(data_filtered)$layers[[1]]$aes_params
plot(data_filtered)$layers[[1]]
plot(data_filtered)$layers[[1]] |> names()
plot(data_filtered)$layers[[1]]$geom_params |> names()
plot(data_filtered)$layers[[1]]$aes_params |> names()
plot(data_filtered)$layers[[1]]$mapping |> names()
plot(data_filtered)$layers[[1]]$aes_params$alpha <- 0.2
sapply(plot(data_filtered)$layers, \(x) class(x$geom)[1])
plot(data_filtered)$layers[[1]]$geom_params$alpha <- 0.2
plot(data_filtered)$layers[[1]]$geom |> names()
ggplot(data_filtered, aes(x = time)) +
geom_line(aes(y = smo2_left, colour = "smo2_left"), alpha = 0.2) +
geom_line(aes(y = smo2_right, colour = "smo2_right"), alpha = 0.2)
data_filtered
