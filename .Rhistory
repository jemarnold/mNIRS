expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2 unfiltered",
smo2_right = "SmO2 unfiltered"),
sample_column = c(time = "Timestamp (seconds passed)"),
keep_all = FALSE,
verbose = FALSE)
)
expect_s3_class(tr_data, "mNIRS.data")
expect_s3_class(tr_data, "data.frame")
expect_s3_class(tr_data$time, "POSIXct")
tr_data$time
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2 unfiltered",
smo2_right = "SmO2 unfiltered"),
sample_column = c(time = "Timestamp (seconds passed)"),
numeric_time = FALSE,
keep_all = FALSE,
verbose = TRUE)
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2 unfiltered",
smo2_right = "SmO2 unfiltered"),
sample_column = c(time = "Timestamp (seconds passed)"),
numeric_time = TRUE,
keep_all = FALSE,
verbose = TRUE)
class(tr_data$time)
file_path <- system.file("extdata",
"moxy_ramp_example.xlsx",
package = "mNIRS")
expect_warning(
df.moxy.perfpro <- read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
event_column = c(event = "Event"),
numeric_time = TRUE,
keep_all = FALSE,
verbose = TRUE),
"non-sequential or repeating")
df.moxy.perfpro
expect_warning(
df.moxy.perfpro <- read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
event_column = c(event = "Event"),
numeric_time = FALSE,
keep_all = FALSE,
verbose = TRUE),
"non-sequential or repeating")
df.moxy.perfpro
expect_warning(
df.moxy.perfpro <- read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
event_column = c(event = "Event"),
numeric_time = FALSE,
keep_all = FALSE,
verbose = TRUE),
"non-sequential or repeating")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
verbose = FALSE)
)
expect_s3_class(df.moxy.perfpro, "mNIRS.data")
expect_s3_class(df.moxy.perfpro, "data.frame")
expect_s3_class(tr_data$time, "numeric")
expect_s3_class(tr_data$time, "POSIXct")
tr_data$time
expect_s3_class(df.moxy.perfpro, "data.frame")
expect_s3_class(df.moxy.perfpro$time, "POSIXct")
expect_type(df.moxy.perfpro$time, "double")
expect_true(
all(c("nirs_columns", "sample_column",
"event_column", "sample_rate") %in%
names(attributes(df.moxy.perfpro))))
test_that("read_data moxy.perfpro works", {
file_path <- system.file("extdata",
"moxy_ramp_example.xlsx",
package = "mNIRS")
expect_warning(
df.moxy.perfpro <- read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
event_column = c(event = "Event"),
numeric_time = FALSE,
keep_all = FALSE,
verbose = TRUE),
"non-sequential or repeating")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
verbose = FALSE)
)
expect_s3_class(df.moxy.perfpro, "mNIRS.data")
expect_s3_class(df.moxy.perfpro, "data.frame")
expect_s3_class(df.moxy.perfpro$time, "POSIXct")
expect_type(df.moxy.perfpro$time, "double")
expect_true(
all(c("nirs_columns", "sample_column",
"event_column", "sample_rate") %in%
names(attributes(df.moxy.perfpro))))
expect_equal(attr(df.moxy.perfpro, "sample_rate"), 2)
expect_s3_class(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
numeric_time = FALSE,
keep_all = FALSE,
verbose = FALSE)$time,
"POSIXct")
expect_error(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_doesnt_exist"),
verbose = FALSE),
"not detected")
expect_warning(
read_data(
file_path = file_path,
nirs_columns = c(smo2 = "smo2_left_VL",
smo2 = "smo2_right_VL"),
verbose = TRUE),
"Duplicate input column")
expect_message(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = NULL,
verbose = TRUE),
"No `sample_column` provided")
})
test_that("read_data train.red works", {
file_path <- system.file("extdata",
"train.red_interval_example.csv",
package = "mNIRS")
expect_warning(
tr_data <- read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2 unfiltered",
smo2_right = "SmO2 unfiltered"),
sample_column = c(time = "Timestamp (seconds passed)"),
keep_all = FALSE,
verbose = TRUE),
"non-sequential or repeating")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2 unfiltered",
smo2_right = "SmO2 unfiltered"),
sample_column = c(time = "Timestamp (seconds passed)"),
keep_all = FALSE,
verbose = FALSE)
)
expect_s3_class(tr_data, "mNIRS.data")
expect_s3_class(tr_data, "data.frame")
expect_s3_class(tr_data$time, "numeric")
expect_type(tr_data$time, "double")
expect_true(
all(c("nirs_columns", "sample_column", "sample_rate") %in%
names(attributes(tr_data))))
expect_equal(attr(tr_data, "sample_rate"), 10)
expect_error(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_doesnt_exist"),
verbose = FALSE),
"not detected")
expect_warning(
read_data(
file_path = file_path,
nirs_columns = c(smo2 = "SmO2 unfiltered",
smo2 = "SmO2 unfiltered"),
verbose = TRUE),
"Duplicate input column")
expect_message(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2 unfiltered",
smo2_right = "SmO2 unfiltered"),
sample_column = NULL,
verbose = TRUE),
"No `sample_column` provided")
})
file_path <- system.file("extdata",
"train.red_interval_example.csv",
package = "mNIRS")
expect_warning(
tr_data <- read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2 unfiltered",
smo2_right = "SmO2 unfiltered"),
sample_column = c(time = "Timestamp (seconds passed)"),
keep_all = FALSE,
verbose = TRUE),
"non-sequential or repeating")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2 unfiltered",
smo2_right = "SmO2 unfiltered"),
sample_column = c(time = "Timestamp (seconds passed)"),
keep_all = FALSE,
verbose = FALSE)
)
expect_s3_class(tr_data, "mNIRS.data")
expect_s3_class(tr_data, "data.frame")
expect_s3_class(tr_data$time, "numeric")
expect_type(tr_data$time, "double")
tr_data$time
class(tr_data$time)
expect_s4_class(tr_data$time, "numeric")
expect_s7_class(tr_data$time, "numeric")
test_that("read_data oxysoft works", {
file_path <- system.file("extdata",
"oxysoft_interval_example.xlsx",
package = "mNIRS")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
verbose = FALSE)
)
expect_length(
oxy_data <- read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
sample_column = c(sample = 1),
keep_all = FALSE,
verbose = TRUE),
3)
expect_s3_class(oxy_data, "mNIRS.data")
expect_s3_class(oxy_data, "data.frame")
expect_true(
all(c("nirs_columns", "sample_column", "sample_rate") %in%
names(attributes(oxy_data))))
expect_equal(attr(oxy_data, "sample_rate"), 50)
expect_type(oxy_data$sample, "double")
expect_error(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_doesnt_exist"),
verbose = FALSE),
"not detected")
expect_warning(
read_data(
file_path = file_path,
nirs_columns = c(smo2 = "6",
smo2 = "9"),
sample_column = c(sample = 1),
verbose = TRUE),
"Duplicate input column")
expect_message(
read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
sample_column = NULL,
verbose = TRUE),
"No `sample_column` provided")
})
expect_s3_class(oxy_data$sample, "numeric")
file_path <- system.file("extdata",
"oxysoft_interval_example.xlsx",
package = "mNIRS")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
verbose = FALSE)
)
expect_length(
oxy_data <- read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
sample_column = c(sample = 1),
keep_all = FALSE,
verbose = TRUE),
3)
expect_s3_class(oxy_data$sample, "numeric")
expect_length(
oxy_data <- read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
sample_column = c(sample = 1),
keep_all = FALSE,
verbose = TRUE),
3)
expect_type(oxy_data$sample, "double")
expect_type(oxy_data$sample, "double")
expect_s3_class(oxy_data, "mNIRS.data")
expect_s3_class(oxy_data, "data.frame")
test_that("read_data oxysoft works", {
file_path <- system.file("extdata",
"oxysoft_interval_example.xlsx",
package = "mNIRS")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
verbose = FALSE)
)
expect_length(
oxy_data <- read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
sample_column = c(sample = 1),
keep_all = FALSE,
verbose = TRUE),
3)
expect_type(oxy_data$sample, "double")
expect_s3_class(oxy_data, "mNIRS.data")
expect_s3_class(oxy_data, "data.frame")
expect_true(
all(c("nirs_columns", "sample_column", "sample_rate") %in%
names(attributes(oxy_data))))
expect_equal(attr(oxy_data, "sample_rate"), 50)
expect_error(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_doesnt_exist"),
verbose = FALSE),
"not detected")
expect_warning(
read_data(
file_path = file_path,
nirs_columns = c(smo2 = "6",
smo2 = "9"),
sample_column = c(sample = 1),
verbose = TRUE),
"Duplicate input column")
expect_message(
read_data(
file_path = file_path,
nirs_columns = c(HHb_VL = 6,
ICG_VL = 9),
sample_column = NULL,
verbose = TRUE),
"No `sample_column` provided")
})
file_path <- system.file("extdata",
"vo2master_moxyunit_example.xlsx",
package = "mNIRS")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = FALSE)
)
expect_length(
vmpro_data <- read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
numeric_time = FALSE,
keep_all = TRUE,
verbose = FALSE),
5)
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = FALSE)
)
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = FALSE)
file_path <- system.file("extdata",
"vo2master_moxyunit_example.xlsx",
package = "mNIRS")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = FALSE)
)
devtools::load_all()
file_path <- system.file("extdata",
"vo2master_moxyunit_example.xlsx",
package = "mNIRS")
expect_silent(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = FALSE)
)
expect_length(
vmpro_data <- read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
numeric_time = FALSE,
keep_all = TRUE,
verbose = FALSE),
5)
expect_s3_class(vmpro_data, "mNIRS.data")
expect_s3_class(vmpro_data, "data.frame")
expect_s3_class(vmpro_data$time, "POSIXct")
expect_true(
all(c("nirs_columns", "sample_column", "sample_rate") %in%
names(attributes(vmpro_data))))
expect_equal(attr(vmpro_data, "sample_rate"), 1)
expect_error(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "smo2_doesnt_exist"),
verbose = FALSE),
"not detected")
expect_warning(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = TRUE),
"Duplicate input column")
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = TRUE)
expect_warning(
read_data(
file_path = file_path,
nirs_columns = c(smo2 = "SmO2[%]",
smo2 = "SmO2 -  2[%]"),
sample_column = c(time = "Time[utc]"),
verbose = TRUE),
"Duplicate input column")
expect_message(
read_data(
file_path = file_path,
nirs_columns = c(smo2_left = "SmO2[%]",
smo2_right = "SmO2 -  2[%]"),
sample_column = NULL,
verbose = TRUE),
"No `sample_column` provided")
x = "Timestamp (seconds passed)"
unlist(strsplit(x, "\\s*,\\s*"))
x = 'time = "Timestamp (seconds passed)"'
unlist(strsplit(x, "\\s*,\\s*"))
vec <- unlist(strsplit(x, "\\s*,\\s*"))
strsplit(vec, "\\s*=\\s*")
unlist(strsplit(x, "\\s*,\\s*"))
x
x = c(smo2_left = "SmO2 unfiltered",
smo2_right = "SmO2 unfiltered")
vec <- unlist(strsplit(x, "\\s*,\\s*"))
vec
x
unlist(strsplit(x, "\\s*,\\s*"))
vec <- unlist(strsplit(x, "\\s*,\\s*"))
lst <- strsplit(vec, "\\s*=\\s*")
lst
setNames(sapply(lst, \(.x) trimws(.x[2])),
sapply(lst, \(.x) trimws(.x[1])))
'smo2_left = "SmO2 unfiltered",smo2_right = "SmO2 unfiltered"'
x = 'smo2_left = "SmO2 unfiltered",smo2_right = "SmO2 unfiltered"'
vec <- unlist(strsplit(x, "\\s*,\\s*"))
vec
vec <- unlist(strsplit(x, "\\s*,\\s*"))
lst <- strsplit(vec, "\\s*=\\s*")
lst
gsub('["\\\"]', '', x)
noquotes <- gsub('["\\\"]', '', x)
unlist(strsplit(noquotes, "\\s*,\\s*"))
split_vec <- unlist(strsplit(noquotes, "\\s*,\\s*"))
strsplit(split_vec, "\\s*=\\s*")
split_list <- strsplit(split_vec, "\\s*=\\s*")
setNames(sapply(split_list, \(.x) trimws(.x[2])),
sapply(split_list, \(.x) trimws(.x[1])))
