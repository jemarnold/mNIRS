dplyr::filter(
dplyr::if_any(
dplyr::any_of(
names(removed_fixed_values_list)),
~ is.na(.)))
#     .data = raw_data,
#     sample_rate = 1,
#     remove_fixed_values = c(66.1, 66.4),
#     remove_outliers = TRUE#,
#     # k = 30, t0 = 3
#     )
# .data <- raw_data |>
#     dplyr::mutate(
#         dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
#     )
remove_fixed_values = list(smo2_left_VL = c(66.4, 66.8), smo2_right_VL = c(70.9, 70.6))
(removed_fixed_values_list <-
if (is.list(remove_fixed_values) &
length(names(remove_fixed_values)) ==
length(remove_fixed_values)) {
remove_fixed_values
} else if (is.list(remove_fixed_values)) {
setNames(rlang::rep_along(
names(nirs_columns),
remove_fixed_values),
names(nirs_columns))
} else {
setNames(rlang::rep_along(
names(nirs_columns),
list(remove_fixed_values)),
names(nirs_columns))
})
purrr::imap(
removed_fixed_values_list,
\(fixed_vals, nirs) {
.data |>
dplyr::select(dplyr::any_of(nirs)) |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(nirs),
~ dplyr::if_else(
. %in% fixed_vals,
NA_real_, .))
)
}) |>
dplyr::bind_cols(
dplyr::select(
.data,
-dplyr::any_of(names(removed_fixed_values_list)))
) |>
dplyr::relocate(names(.data)) |>
dplyr::filter(
dplyr::if_any(
dplyr::any_of(
names(removed_fixed_values_list)),
~ is.na(.)))
remove_fixed_values <- list(c(66.4, 70.9))
(removed_fixed_values_list <-
if (is.list(remove_fixed_values) &
length(names(remove_fixed_values)) ==
length(remove_fixed_values)) {
remove_fixed_values
} else if (is.list(remove_fixed_values)) {
setNames(rlang::rep_along(
names(nirs_columns),
remove_fixed_values),
names(nirs_columns))
} else {
setNames(rlang::rep_along(
names(nirs_columns),
list(remove_fixed_values)),
names(nirs_columns))
})
purrr::imap(
removed_fixed_values_list,
\(fixed_vals, nirs) {
.data |>
dplyr::select(dplyr::any_of(nirs)) |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(nirs),
~ dplyr::if_else(
. %in% fixed_vals,
NA_real_, .))
)
}) |>
dplyr::bind_cols(
dplyr::select(
.data,
-dplyr::any_of(names(removed_fixed_values_list)))
) |>
dplyr::relocate(names(.data)) |>
dplyr::filter(
dplyr::if_any(
dplyr::any_of(
names(removed_fixed_values_list)),
~ is.na(.)))
remove_fixed_values <- c(66.4, 70.9)
(removed_fixed_values_list <-
if (is.list(remove_fixed_values) &
length(names(remove_fixed_values)) ==
length(remove_fixed_values)) {
remove_fixed_values
} else if (is.list(remove_fixed_values)) {
setNames(rlang::rep_along(
names(nirs_columns),
remove_fixed_values),
names(nirs_columns))
} else {
setNames(rlang::rep_along(
names(nirs_columns),
list(remove_fixed_values)),
names(nirs_columns))
})
purrr::imap(
removed_fixed_values_list,
\(fixed_vals, nirs) {
.data |>
dplyr::select(dplyr::any_of(nirs)) |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(nirs),
~ dplyr::if_else(
. %in% fixed_vals,
NA_real_, .))
)
}) |>
dplyr::bind_cols(
dplyr::select(
.data,
-dplyr::any_of(names(removed_fixed_values_list)))
) |>
dplyr::relocate(names(.data)) |>
dplyr::filter(
dplyr::if_any(
dplyr::any_of(
names(removed_fixed_values_list)),
~ is.na(.)))
!is.null(remove_fixed_values)
is.null(remove_fixed_values)
if (!is.null(remove_fixed_values)) {
(removed_fixed_values_list <-
if (is.list(remove_fixed_values) &
length(names(remove_fixed_values)) ==
length(remove_fixed_values)) {
remove_fixed_values
} else if (is.list(remove_fixed_values)) {
setNames(rlang::rep_along(
names(nirs_columns),
remove_fixed_values),
names(nirs_columns))
} else {
setNames(rlang::rep_along(
names(nirs_columns),
list(remove_fixed_values)),
names(nirs_columns))
})
data_nofixed <- purrr::imap(
removed_fixed_values_list,
\(fixed_vals, nirs) {
.data |>
dplyr::select(dplyr::any_of(nirs)) |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(nirs),
~ dplyr::if_else(
. %in% fixed_vals,
NA_real_, .))
)
}) |>
dplyr::bind_cols(
dplyr::select(
.data,
-dplyr::any_of(names(removed_fixed_values_list)))
) |>
dplyr::relocate(names(.data))
cli::cli_alert_info(paste(
"Values {.val {remove_fixed_values}} will be removed from",
"{.arg nirs_columns} and set to {.val {NA}}."
))
} else if (is.null(remove_fixed_values)) {
data_nofixed <- .data
}
remove_fixed_values
#     .data = raw_data,
#     sample_rate = 1,
#     remove_fixed_values = c(66.1, 66.4),
#     remove_outliers = TRUE#,
#     # k = 30, t0 = 3
#     )
# .data <- raw_data |>
#     dplyr::mutate(
#         dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
#     )
remove_fixed_values = list(smo2_left_VL = c(66.4, 66.8), smo2_right_VL = c(70.9, 70.6))
if (!is.null(remove_fixed_values)) {
(removed_fixed_values_list <-
if (is.list(remove_fixed_values) &
length(names(remove_fixed_values)) ==
length(remove_fixed_values)) {
remove_fixed_values
} else if (is.list(remove_fixed_values)) {
setNames(rlang::rep_along(
names(nirs_columns),
remove_fixed_values),
names(nirs_columns))
} else {
setNames(rlang::rep_along(
names(nirs_columns),
list(remove_fixed_values)),
names(nirs_columns))
})
data_nofixed <- purrr::imap(
removed_fixed_values_list,
\(fixed_vals, nirs) {
.data |>
dplyr::select(dplyr::any_of(nirs)) |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(nirs),
~ dplyr::if_else(
. %in% fixed_vals,
NA_real_, .))
)
}) |>
dplyr::bind_cols(
dplyr::select(
.data,
-dplyr::any_of(names(removed_fixed_values_list)))
) |>
dplyr::relocate(names(.data))
cli::cli_alert_info(paste(
"Values {.val {remove_fixed_values}} will be removed from",
"{.arg nirs_columns} and set to {.val {NA}}."
))
} else if (is.null(remove_fixed_values)) {
data_nofixed <- .data
}
remove_fixed_values
cli::cli_alert_info(paste(
"Values {.val {removed_fixed_values_list}} will be removed from",
"{.arg nirs_columns} and set to {.val {NA}}."
))
cli::cli_alert_info(paste(
"Values {.val {removed_fixed_values_list}} will be removed from",
"{.arg {names(removed_fixed_values_list)}} and set to {.val {NA}}."
))
removed_fixed_values_list
paste(removed_fixed_values_list)
paste(names(removed_fixed_values_list), removed_fixed_values_list)
paste(names(removed_fixed_values_list), removed_fixed_values_list,
sep = " = ")
# cli::cli_alert_info(paste(
#     "Values {.val {removed_fixed_values_list}} will be removed from",
#     "{.arg {names(removed_fixed_values_list)}} and set to {.val {NA}}."
# ))
removed_fixed_values_string <- paste(
names(removed_fixed_values_list),
removed_fixed_values_list,
sep = " = ")
cli::cli_alert_info(paste(
"Values will be removed from",
"{.arg {removed_fixed_values_string}} and set to {.val {NA}}."
))
cli::cli_alert_info(paste(
"Values will be set to {.val {NA}}",
"{.arg {removed_fixed_values_string}}."
))
cli::cli_alert_info(paste(
"Values will be set to {.val {NA}} from",
"{.arg {removed_fixed_values_string}}."
))
remove_fixed_values
!is.null(remove_fixed_values)
remove_fixed_values
if (!is.null(remove_fixed_values)) {
remove_fixed_values
} else NA
cli::cli_alert_info(paste(
"Local outliers will be set to the local median."
))
cli::cli_alert_info("Local outliers will be set to the local median.")
if (!is.null(remove_fixed_values)) {
removed_fixed_values_list
} else NA
## Troubleshooting ========================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
# attributes(raw_data)
processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = c(66.4, 70.9),
remove_outliers = TRUE#,
# k = 30, t0 = 3
)
## Troubleshooting ========================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
# attributes(raw_data)
processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = c(66.4, 70.9),
remove_outliers = TRUE#,
# k = 30, t0 = 3
)
# attributes(raw_data)
processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = c(66.4, 70.9),
remove_outliers = FALSE#,
# k = 30, t0 = 3
)
# attributes(raw_data)
processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = list(c(66.4, 70.9)),
remove_outliers = TRUE#,
# k = 30, t0 = 3
)
# attributes(raw_data)
processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = list(smo2_left_VL = c(66.4, 66.8),
smo2_right_VL = c(70.9, 70.6)),
remove_outliers = TRUE#,
# k = 30, t0 = 3
)
# attributes(raw_data)
(processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = list(smo2_left_VL = c(66.4, 66.8),
smo2_right_VL = c(70.9, 70.6)),
remove_outliers = TRUE#,
# k = 30, t0 = 3
))
attributes(processed_data)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
# attributes(raw_data)
raw_data <- raw_data |>
dplyr::mutate(
dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
)
(processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = list(smo2_left_VL = c(66.4, 66.8),
smo2_right_VL = c(70.9, 70.6)),
remove_outliers = TRUE#,
# k = 30, t0 = 3
))
attributes(processed_data)
(processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = list(c(66.4, 70.9)),
remove_outliers = TRUE#,
# k = 30, t0 = 3
))
(processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = c(66.4, 70.9),
remove_outliers = TRUE#,
# k = 30, t0 = 3
))
## Troubleshooting ========================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
# attributes(raw_data)
raw_data <- raw_data |>
dplyr::mutate(
dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
)
(processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = c(66.4, 70.9),
remove_outliers = TRUE#,
# k = 30, t0 = 3
))
## Troubleshooting ========================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
# attributes(raw_data)
raw_data <- raw_data |>
dplyr::mutate(
dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
)
(processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = c(66.4, 70.9),
remove_outliers = TRUE#,
# k = 30, t0 = 3
))
## Troubleshooting ========================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
# attributes(raw_data)
raw_data <- raw_data |>
dplyr::mutate(
dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
)
(processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = c(66.4, 70.9),
remove_outliers = TRUE#,
# k = 30, t0 = 3
))
attributes(processed_data)
## Troubleshooting ========================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
# attributes(raw_data)
raw_data <- raw_data |>
dplyr::mutate(
dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
)
(processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = c(66.4, 70.9),
remove_outliers = TRUE#,
# k = 30, t0 = 3
))
## Troubleshooting ========================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
# attributes(raw_data)
raw_data <- raw_data |>
dplyr::mutate(
dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
)
(processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = c(66.4, 70.9),
remove_outliers = TRUE#,
# k = 30, t0 = 3
))
(processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = c(66.4, 70.9),
remove_outliers = TRUE#,
k = 30, t0 = 3
(processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = c(66.4, 70.9),
remove_outliers = TRUE,
k = 30, t0 = 3
))
cli::cli_alert_info("{.arg k} = {.val {k}}")
## Troubleshooting ========================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
# attributes(raw_data)
raw_data <- raw_data |>
dplyr::mutate(
dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
)
(processed_data <- remove_outliers(
.data = raw_data,
sample_rate = 1,
remove_fixed_values = c(66.4, 70.9),
remove_outliers = TRUE,
k = 30, t0 = 3
))
