normalise_data(x, shift_to = 10, shift_position = "max")
#
#
# test <- function(A = 0, B) {
#     missing(B)
# }
# test()
x <- c(-2, -1, 0, -3, 1, 2, NA)
normalise_data(x, shift_to = 10, shift_position = "max")
normalise_data(x, shift_to = 10, shift_position = "min")
normalise_data(x, shift_to = 10, shift_position = "first")
#' normalise range to `[0, 100]`).
#'
#' @param ... Additional arguments.
#'
#' @details
#' ...
#'
#' @return A numeric vector of filtered data.
#'
#' @export
normalise_data <- function(
x,
shift_to = 0,
normalise_range = c(0, 100),
shift_by, ## numeric scalar
shift_position = c("minimum", "first", "maximum"),
mean_samples, ## c(1, 30, 1)
...
) {
## shift minimum to zero
## shift maximum to zero (not common)
## shift starting value (mean X samples?) to zero
## TODO shift certain time range mean to zero?
shift_position <- match.arg(shift_position)
## pass through optional arguments
args <- list(...)
## shift range ========================================
if (shift_position == "minimum") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
min(x, na.rm = TRUE)) + shift_to
} else if (shift_position == "maximum") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
max(x, na.rm = TRUE)) + shift_to
} else if (shift_position == "first") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
dplyr::first(x, na_rm = TRUE))
}
return(y)
}
#' normalise range to `[0, 100]`).
#'
#' @param ... Additional arguments.
#'
#' @details
#' ...
#'
#' @return A numeric vector of filtered data.
#'
#' @export
normalise_data <- function(
x,
shift_to = 0,
normalise_range = c(0, 100),
shift_by, ## numeric scalar
shift_position = c("minimum", "first", "maximum"),
mean_samples, ## c(1, 30, 1)
...
) {
## shift minimum to zero
## shift maximum to zero (not common)
## shift starting value (mean X samples?) to zero
## TODO shift certain time range mean to zero?
shift_position <- match.arg(shift_position)
## pass through optional arguments
args <- list(...)
## shift range ========================================
if (shift_position == "minimum") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
min(x, na.rm = TRUE)) + shift_to
} else if (shift_position == "maximum") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
max(x, na.rm = TRUE)) + shift_to
} else if (shift_position == "first") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
dplyr::first(x, na_rm = TRUE))
} else if (is.null(shift_to) & (missing(shift_by) | is.null(shift_by))) {
y <- x
}
return(y)
}
#
#
# test <- function(A = 0, B) {
#     missing(B)
# }
# test()
x <- c(-2, -1, 0, -3, 1, 2, NA)
normalise_data(x, shift_to = 10, shift_position = "first")
normalise_data(x, shift_to = NULL, shift_position = "first")
#' normalise range to `[0, 100]`).
#'
#' @param ... Additional arguments.
#'
#' @details
#' ...
#'
#' @return A numeric vector of filtered data.
#'
#' @export
normalise_data <- function(
x,
shift_to = 0,
normalise_range = c(0, 100),
shift_by, ## numeric scalar
shift_position = c("minimum", "first", "maximum"),
mean_samples, ## c(1, 30, 1)
...
) {
## shift minimum to zero
## shift maximum to zero (not common)
## shift starting value (mean X samples?) to zero
## TODO shift certain time range mean to zero?
shift_position <- match.arg(shift_position)
## pass through optional arguments
args <- list(...)
## shift range ========================================
if (shift_position == "minimum") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
min(x, na.rm = TRUE)) + shift_to
} else if (shift_position == "maximum") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
max(x, na.rm = TRUE)) + shift_to
} else if (shift_position == "first") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
dplyr::first(x, na_rm = TRUE))
} else if (is.null(shift_to) & (missing(shift_by) | is.null(shift_by))) {
y <- x
}
return(y)
}
#
#
# test <- function(A = 0, B) {
#     missing(B)
# }
# test()
x <- c(-2, -1, 0, -3, 1, 2, NA)
normalise_data(x, shift_to = NULL, shift_position = "first")
normalise_data(x, shift_to = NULL)
normalise_data(x, shift_to = 0)
normalise_data(x, shift_to = NULL)
#' normalise range to `[0, 100]`).
#'
#' @param ... Additional arguments.
#'
#' @details
#' ...
#'
#' @return A numeric vector of filtered data.
#'
#' @export
normalise_data <- function(
x,
shift_to = 0,
normalise_range = c(0, 100),
shift_by, ## numeric scalar
shift_position = c("minimum", "first", "maximum"),
mean_samples, ## c(1, 30, 1)
...
) {
## shift minimum to zero
## shift maximum to zero (not common)
## shift starting value (mean X samples?) to zero
## TODO shift certain time range mean to zero?
shift_position <- match.arg(shift_position)
## pass through optional arguments
args <- list(...)
## shift range ========================================
if (is.null(shift_to) & (missing(shift_by) | is.null(shift_by))) {
y <- x
} else if (shift_position == "minimum") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
min(x, na.rm = TRUE)) + shift_to
} else if (shift_position == "maximum") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
max(x, na.rm = TRUE)) + shift_to
} else if (shift_position == "first") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
dplyr::first(x, na_rm = TRUE))
}
return(y)
}
#
#
# test <- function(A = 0, B) {
#     missing(B)
# }
# test()
x <- c(-2, -1, 0, -3, 1, 2, NA)
normalise_data(x, shift_to = NULL)
#' normalise range to `[0, 100]`).
#'
#' @param ... Additional arguments.
#'
#' @details
#' ...
#'
#' @return A numeric vector of filtered data.
#'
#' @export
normalise_data <- function(
x,
shift_to = 0,
normalise_range = c(0, 100),
shift_by, ## numeric scalar
shift_position = c("minimum", "first", "maximum"),
mean_samples, ## c(1, 30, 1)
...
) {
## shift minimum to zero
## shift maximum to zero (not common)
## shift starting value (mean X samples?) to zero
## TODO shift certain time range mean to zero?
shift_position <- match.arg(shift_position)
## pass through optional arguments
args <- list(...)
## shift range ========================================
if (is.null(shift_to) & missing(shift_by)) {
y <- x
} else if (shift_position == "minimum") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
min(x, na.rm = TRUE)) + shift_to
} else if (shift_position == "maximum") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
max(x, na.rm = TRUE)) + shift_to
} else if (shift_position == "first") {
y <- x - ifelse(
!missing(shift_by),
shift_by,
dplyr::first(x, na_rm = TRUE))
}
return(y)
}
#
#
# test <- function(A = 0, B) {
#     missing(B)
# }
# test()
x <- c(-2, -1, 0, -3, 1, 2, NA)
normalise_data(x, shift_to = NULL)
#' normalise range to `[0, 100]`).
#'
#' @param ... Additional arguments.
#'
#' @details
#' ...
#'
#' @return A numeric vector of filtered data.
#'
#' @export
normalise_data <- function(
x,
shift_to = 0,
normalise_range = c(0, 100),
shift_by = NULL, ## numeric scalar
shift_position = c("minimum", "first", "maximum"),
mean_samples, ## c(1, 30, 1)
...
) {
## shift minimum to zero
## shift maximum to zero (not common)
## shift starting value (mean X samples?) to zero
## TODO shift certain time range mean to zero?
shift_position <- match.arg(shift_position)
## pass through optional arguments
args <- list(...)
## shift range ========================================
if (is.null(shift_to) & is.null(shift_by)) {
y <- x
} else if (shift_position == "minimum") {
y <- x - ifelse(
!is.null(shift_by),
shift_by,
min(x, na.rm = TRUE)) + shift_to
} else if (shift_position == "maximum") {
y <- x - ifelse(
!is.null(shift_by),
shift_by,
max(x, na.rm = TRUE)) + shift_to
} else if (shift_position == "first") {
y <- x - ifelse(
!is.null(shift_by),
shift_by,
dplyr::first(x, na_rm = TRUE))
}
return(y)
}
#
#
# test <- function(A = 0, B) {
#     missing(B)
# }
# test()
x <- c(-2, -1, 0, -3, 1, 2, NA)
normalise_data(x, shift_to = NULL)
normalise_data(x, shift_to = 0)
normalise_data(x, shift_by = 10)
normalise_data(x, shift_by = 10, position = "first")
normalise_data(x, shift_by = 10, position = "min")
#' normalise range to `[0, 100]`).
#'
#' @param ... Additional arguments.
#'
#' @details
#' ...
#'
#' @return A numeric vector of filtered data.
#'
#' @export
normalise_data <- function(
x,
shift_to = 0,
normalise_range = c(0, 100),
shift_by = NULL, ## numeric scalar
position = c("minimum", "first", "maximum"),
mean_samples, ## c(1, 30, 1)
...
) {
## shift minimum to zero
## shift maximum to zero (not common)
## shift starting value (mean X samples?) to zero
## TODO shift certain time range mean to zero?
position <- match.arg(position)
## pass through optional arguments
args <- list(...)
## shift range ========================================
if (is.null(shift_to) & is.null(shift_by)) {
y <- x
} else if (position == "minimum") {
y <- x - ifelse(
!is.null(shift_by),
shift_by,
min(x, na.rm = TRUE)) + shift_to
} else if (position == "maximum") {
y <- x - ifelse(
!is.null(shift_by),
shift_by,
max(x, na.rm = TRUE)) + shift_to
} else if (position == "first") {
y <- x - ifelse(
!is.null(shift_by),
shift_by,
dplyr::first(x, na_rm = TRUE))
}
return(y)
}
normalise_data(x, shift_by = 10, position = "min")
normalise_data(x, shift_by = NULL, position = "min")
normalise_data(x, shift_by = NULL)
#' normalise range to `[0, 100]`).
#'
#' @param ... Additional arguments.
#'
#' @details
#' ...
#'
#' @return A numeric vector of filtered data.
#'
#' @export
normalise_data <- function(
x,
shift_to = 0,
normalise_range = c(0, 100),
shift_by = NULL, ## numeric scalar
position = c("minimum", "first", "maximum"),
mean_samples, ## c(1, 30, 1)
...
) {
## shift minimum to zero
## shift maximum to zero (not common)
## shift starting value (mean X samples?) to zero
## TODO shift certain time range mean to zero?
position <- match.arg(position)
## pass through optional arguments
args <- list(...)
## shift range ========================================
if (is.null(shift_to) & is.null(shift_by)) {
y <- x
} else if (position == "minimum") {
y <- x - ifelse(
!is.null(shift_by),
shift_by,
min(x, na.rm = TRUE)) + shift_to
} else if (position == "maximum") {
y <- x - ifelse(
!is.null(shift_by),
shift_by,
max(x, na.rm = TRUE)) + shift_to
} else if (position == "first") {
y <- x - ifelse(
!is.null(shift_by),
shift_by,
dplyr::first(x, na_rm = TRUE))
}
## normalise range ==================================
if (is.null(normalise_range)) {
z <- y
} else {
(x - min(x, na.rm = TRUE)) /
diff(range(x, na.rm = TRUE)) * diff(normalise_range) +
min(normalise_range)
}
return(z)
}
#' normalise range to `[0, 100]`).
#'
#' @param ... Additional arguments.
#'
#' @details
#' ...
#'
#' @return A numeric vector of filtered data.
#'
#' @export
normalise_data <- function(
x,
shift_to = 0,
normalise_range = c(0, 100),
shift_by = NULL, ## numeric scalar
position = c("minimum", "first", "maximum"),
mean_samples, ## c(1, 30, 1)
...
) {
## shift minimum to zero
## shift maximum to zero (not common)
## shift starting value (mean X samples?) to zero
## TODO shift certain time range mean to zero?
position <- match.arg(position)
## pass through optional arguments
args <- list(...)
## shift range ========================================
if (is.null(shift_to) & is.null(shift_by)) {
y <- x
} else if (position == "minimum") {
y <- x - ifelse(
!is.null(shift_by),
shift_by,
min(x, na.rm = TRUE)) + shift_to
} else if (position == "maximum") {
y <- x - ifelse(
!is.null(shift_by),
shift_by,
max(x, na.rm = TRUE)) + shift_to
} else if (position == "first") {
y <- x - ifelse(
!is.null(shift_by),
shift_by,
dplyr::first(x, na_rm = TRUE))
}
## normalise range ==================================
if (is.null(normalise_range)) {
z <- y
} else {
z <- (y - min(y, na.rm = TRUE)) /
diff(range(y, na.rm = TRUE)) * diff(normalise_range) +
min(normalise_range)
}
return(z)
}
#
#
# test <- function(A = 0, B) {
#     missing(B)
# }
# test()
x <- c(-2, -1, 0, -3, 1, 2, NA)
normalise_data(x, shift_to = NULL)
normalise_data(x, shift_to = NULL, normalise_range = NULL)
normalise_data(x, shift_to = NULL, normalise_range = c(0, 1))
normalise_data(x, shift_to = 0, normalise_range = c(0, 1))
normalise_data(x, shift_to = NULL, normalise_range = c(0, 1))
normalise_data(x, normalise_range = c(0, 1))
