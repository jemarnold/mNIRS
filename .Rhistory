options(digits = 5, digits.secs = 3, scipen = 3,
dplyr.summarise.inform = FALSE,
tibble.print_min = 20)
text_size <- 12
theme_set(
theme_bw(base_size = text_size, base_family = "Merriweather Sans") +
theme(
text = element_text(colour = "black"),
plot.title = ggtext::element_textbox(size = rel(1.2), lineheight = 1.1),
plot.subtitle = ggtext::element_textbox(lineheight = 1.1),
plot.caption = ggtext::element_textbox(colour = "grey50", halign = 1),
panel.border = element_blank(),
axis.line = element_line(),
# panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = rel(1.2), face = "bold"),
legend.position = "none",
legend.justification = "right",
legend.margin = margin(rep(1, 4)),
legend.box.spacing = unit(text_size/4, "pt"),
strip.background = element_rect(fill = "grey95"),
strip.text = element_text(margin = margin(rep(text_size/4, 4))),
))
#| context: setup
suppressPackageStartupMessages({
# library(JAPackage)
library(glue)
library(bslib)
# library(plotly)
# library(ggpubr)
library(shiny)
# library(readxl)
# library(DT)
library(mNIRS)
library(tidyverse)
})
options(digits = 5, digits.secs = 3, scipen = 3,
dplyr.summarise.inform = FALSE,
tibble.print_min = 20)
text_size <- 12
theme_set(
theme_bw(base_size = text_size, base_family = "Merriweather Sans") +
theme(
text = element_text(colour = "black"),
plot.title = ggtext::element_textbox(size = rel(1.2), lineheight = 1.1),
plot.subtitle = ggtext::element_textbox(lineheight = 1.1),
plot.caption = ggtext::element_textbox(colour = "grey50", halign = 1),
panel.border = element_blank(),
axis.line = element_line(),
# panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = rel(1.2), face = "bold"),
legend.position = "none",
legend.justification = "right",
legend.margin = margin(rep(1, 4)),
legend.box.spacing = unit(text_size/4, "pt"),
strip.background = element_rect(fill = "grey95"),
strip.text = element_text(margin = margin(rep(text_size/4, 4))),
))
strsplit("NIRS = colname", ", ")
strsplit("NIRS = col, NIRS2 = col2", ", ")
strsplit("NIRS = col, NIRS2 = col2", ",")
strsplit("NIRS = col, NIRS2 = col2", "<space>*,<space>*")
strsplit("NIRS = col, NIRS2 = col2", "\s*,\s*")
strsplit("NIRS = col, NIRS2 = col2", "\\s*,\\s*")
mNIRS::read_data(
r"(C:\R-Projects\mNIRS\mNIRS-app\Oxysoft-example.xlsx)",
nirs_columns = c("O2Hb_VL" = "2",
"HHb_VL" = "3"),
sample_column = c("sample" = "1"),
event_column = c("event" = "...11"),
.keep_all = FALSE)
c("O2Hb_VL" = "2",
"HHb_VL" = "3")
strsplit("NIRS = col, NIRS2 = col2", "\\s*,\\s*")
str_split("NIRS = col, NIRS2 = col2", "\\s*,\\s*")
test_string <- "NIRS = col, NIRS2 = col2"
strsplit(test_string, "\\s*,\\s*")
mNIRS::read_data(
r"(C:\R-Projects\mNIRS\mNIRS-app\Oxysoft-example.xlsx)",
nirs_columns = c(O2Hb_VL = "2",
HHb_VL = "3"),
sample_column = c("sample" = "1"),
event_column = c("event" = "...11"),
.keep_all = FALSE)
mNIRS::read_data(
r"(C:\R-Projects\mNIRS\mNIRS-app\Oxysoft-example.xlsx)",
nirs_columns = c(O2Hb_VL = "2",
HHb_VL = "3"),
sample_column = c(sample = "1"),
event_column = c(event = "...11"),
.keep_all = FALSE)
strsplit(test_string, "\\s*,\\s*")
test_string <- "NIRS = col , NIRS2 = col2"
strsplit(test_string, "\\s*,\\s*")
test_string <- "NIRS = col, NIRS2 = col2"
strsplit(test_string, "\\s*,\\s*")
unlist(strsplit(test_string, "\\s*,\\s*"))
(vec <- unlist(strsplit(test_string, "\\s*,\\s*")))
strsplit(vec, "\\s*=\\s*")
(lst <- strsplit(vec, "\\s*=\\s*"))
vec
(vec <- unlist(strsplit(test_string, "\\s*,\\s*")))
(lst <- strsplit(vec, "\\s*=\\s*"))
setNames(
sapply(lst, \(.x) trimws(.x[1]))
sapply(lst, \(.x) trimws(.x[2])),
setNames(
sapply(lst, \(.x) trimws(.x[1])),
sapply(lst, \(.x) trimws(.x[2])),
)
setNames(
sapply(lst, \(.x) trimws(.x[1])),
sapply(lst, \(.x) trimws(.x[2]))
)
setNames(
sapply(lst, \(.x) trimws(.x[2])),
sapply(lst, \(.x) trimws(.x[1]))
)
string_to_named_vector(test_string)
vec <- unlist(strsplit(x, "\\s*,\\s*"))
string_to_named_vector <- function(x) {
vec <- unlist(strsplit(x, "\\s*,\\s*"))
lst <- strsplit(vec, "\\s*=\\s*")
setNames(sapply(lst, \(.x) trimws(.x[2])),
sapply(lst, \(.x) trimws(.x[1])))
}
string_to_named_vector(test_string)
mNIRS::read_data(
r"(C:\R-Projects\mNIRS\mNIRS-app\Oxysoft-example.xlsx)",
nirs_columns = c(O2Hb_VL = "2",
HHb_VL = "3"),
sample_column = c(sample = "1"),
event_column = c(event = "...11"),
.keep_all = FALSE)$attributes
mNIRS::read_data(
r"(C:\R-Projects\mNIRS\mNIRS-app\Oxysoft-example.xlsx)",
nirs_columns = c(O2Hb_VL = "2",
HHb_VL = "3"),
sample_column = c(sample = "1"),
event_column = c(event = "...11"),
.keep_all = FALSE) |> attributes()
mNIRS::read_data(
r"(C:\R-Projects\mNIRS\mNIRS-app\Oxysoft-example.xlsx)",
nirs_columns = c(O2Hb_VL = "2",
HHb_VL = "3"),
sample_column = c(sample = "1"),
event_column = c(event = "...11"),
.keep_all = FALSE)$nirs_columns
mNIRS::read_data(
r"(C:\R-Projects\mNIRS\mNIRS-app\Oxysoft-example.xlsx)",
nirs_columns = c(O2Hb_VL = "2",
HHb_VL = "3"),
sample_column = c(sample = "1"),
event_column = c(event = "...11"),
.keep_all = FALSE)
mNIRS::read_data(
r"(C:\R-Projects\mNIRS\mNIRS-app\Oxysoft-example.xlsx)",
nirs_columns = c(O2Hb_VL = "2",
HHb_VL = "3"),
sample_column = c(sample = "1"),
event_column = c(event = "...11"),
.keep_all = FALSE)
raw_data <- mNIRS::read_data(
r"(C:\R-Projects\mNIRS\mNIRS-app\Oxysoft-example.xlsx)",
nirs_columns = c(O2Hb_VL = "2",
HHb_VL = "3"),
sample_column = c(sample = "1"),
event_column = c(event = "...11"),
.keep_all = FALSE)
raw_data |>
if (TRUE) {
mutate(
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear"))
)}
raw_data |>
mutate(
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear"))
}
)
names(attributes(raw_data)$nirs_columns)
nirs_columns <- names(attributes(raw_data)$nirs_columns)
raw_data |>
mutate(
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear"))
}
)
raw_data |>
mutate(
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear")$y)
}
)
attributes(raw_data)
sample_rate <- attributes(raw_data)$sample_rate
raw_data |>
mutate(
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear")$y)
},
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_outliers(.x, k = 5*sample_rate)$y)
},
)
raw_data |>
mutate(
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear")$y)
},
if (FALSE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_outliers(.x, k = 5*sample_rate)$y)
},
)
raw_data |>
mutate(
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear")$y)
},
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_outliers(.x, k = 5*sample_rate)$y)
},
)
raw_data |>
mutate(
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear")$y)
},
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_outliers(.x, k = sample_rate)$y)
},
)
extract("1, 3, 5")
tidyr::extract("1, 3, 5")
as.numeric("1, 3, 5")
strsplit("1, 3, 5", split = "\\s*,\\s*")
as.numeric(strsplit("1, 3, 5", split = "\\s*,\\s*"))
as.numeric(unlist(strsplit("1, 3, 5", split = "\\s*,\\s*")))
strsplit(input$fixed_values, split = "\\s*,\\s*")[1] |>
as.numeric()
strsplit("1, 2, 4", split = "\\s*,\\s*")[1] |>
as.numeric()
strsplit("1, 2, 4", split = "\\s*,\\s*")[1]
strsplit("1, 2, 4", split = "\\s*,\\s*")[[1]]
strsplit("1, 2, 4", split = "\\s*,\\s*")[[1]] |>
as.numeric()
fixed_values
raw_data
raw_data[1:2, 4:5]
unlist(raw_data[1:2, 4:5])
fixed_values <- c(-42.325, 31.587)
fixed_values
raw_data |>
mutate(
if (input$replace_missing) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear")$y)
},
if (input$replace_outliers) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_outliers(.x, k = sample_rate)$y)
},
if (!is.null(fixed_values)) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_fixed_values(
.x, fixed_values, k = sample_rate)$y)
},
)
raw_data |>
mutate(
# if (input$replace_missing) {
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear")$y)
},
# if (input$replace_outliers) {
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_outliers(.x, k = sample_rate)$y)
},
if (!is.null(fixed_values)) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_fixed_values(
.x, fixed_values, k = sample_rate)$y)
},
)
# fixed_values <- c(-42.325, 31.587)
unlist(raw_data[1:2, 4:5])[1]
fixed_values <- c(-42.3247261, 31.587019)
raw_data |>
mutate(
# if (input$replace_missing) {
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear")$y)
},
# if (input$replace_outliers) {
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_outliers(.x, k = sample_rate)$y)
},
if (!is.null(fixed_values)) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_fixed_values(
.x, fixed_values, k = sample_rate)$y)
},
)
fixed_values
!is.null(fixed_values)
fixed_values <- c(1, 2, 3)
!is.null(fixed_values)
raw_data |>
mutate(
# if (input$replace_missing) {
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear")$y)
},
# if (input$replace_outliers) {
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_outliers(.x, k = sample_rate)$y)
},
if (!is.null(fixed_values)) {
across(
# any_of(nirs_columns),
sample,
\(.x) mNIRS::replace_fixed_values(
.x, fixed_values, k = sample_rate)$y)
},
)
# fixed_values <- c(-42.3247261, 31.587019)
fixed_values <- c(1:10)
raw_data |>
mutate(
# if (input$replace_missing) {
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear")$y)
},
# if (input$replace_outliers) {
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_outliers(.x, k = sample_rate)$y)
},
if (!is.null(fixed_values)) {
across(
# any_of(nirs_columns),
sample,
\(.x) mNIRS::replace_fixed_values(
.x, fixed_values, k = 5)$y)
},
)
fixed_values
# fixed_values <- c(-42.3247261, 31.587019)
fixed_values <- as.numeric(c(1:10))
raw_data |>
mutate(
# if (input$replace_missing) {
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear")$y)
},
# if (input$replace_outliers) {
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_outliers(.x, k = sample_rate)$y)
},
if (!is.null(fixed_values)) {
across(
# any_of(nirs_columns),
sample,
\(.x) mNIRS::replace_fixed_values(
.x, fixed_values, k = 5)$y)
},
)
raw_data |>
mutate(
# if (input$replace_missing) {
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_missing_values(.x, "linear")$y)
},
# if (input$replace_outliers) {
if (TRUE) {
across(
any_of(nirs_columns),
\(.x) mNIRS::replace_outliers(.x, k = sample_rate)$y)
},
if (!is.null(fixed_values)) {
across(
# any_of(nirs_columns),
sample,
\(.x) mNIRS::replace_fixed_values(
.x, fixed_values, k = 5, "NA")$y)
},
)
attributes(raw_data)$sample_rate
is.numeric(c(1, 1.01, TRUE))
is.numeric(1, 1.01, TRUE))
is.numeric(1, 1.01)
is.numeric(1)
is.numeric(1.01)
is.numeric(as.integer(1))
is.numeric(TRUE)
is.numeric(as.logical(1))
#| context: setup
suppressPackageStartupMessages({
# library(JAPackage)
library(glue)
library(bslib)
# library(plotly)
# library(ggpubr)
library(shiny)
# library(readxl)
library(DT)
library(mNIRS)
library(tidyverse)
})
options(digits = 5, digits.secs = 3, scipen = 3,
dplyr.summarise.inform = FALSE,
tibble.print_min = 20)
text_size <- 12
theme_set(
theme_bw(base_size = text_size, base_family = "Merriweather Sans") +
theme(
text = element_text(colour = "black"),
plot.title = ggtext::element_textbox(size = rel(1.2), lineheight = 1.1),
plot.subtitle = ggtext::element_textbox(lineheight = 1.1),
plot.caption = ggtext::element_textbox(colour = "grey50", halign = 1),
panel.border = element_blank(),
axis.line = element_line(),
# panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = rel(1.2), face = "bold"),
legend.position = "none",
legend.justification = "right",
legend.margin = margin(rep(1, 4)),
legend.box.spacing = unit(text_size/4, "pt"),
strip.background = element_rect(fill = "grey95"),
strip.text = element_text(margin = margin(rep(text_size/4, 4))),
))
string_to_named_vector <- function(x) {
vec <- unlist(strsplit(x, "\\s*,\\s*"))
lst <- strsplit(vec, "\\s*=\\s*")
setNames(sapply(lst, \(.x) trimws(.x[2])),
sapply(lst, \(.x) trimws(.x[1])))
}
raw_data
raw_data <- mNIRS::read_data(
r"(C:\R-Projects\mNIRS\mNIRS-app\Oxysoft-example.xlsx)",
nirs_columns = c(O2Hb_VL = "2",
HHb_VL = "3"),
sample_column = c(sample = "1"),
event_column = c(event = "...11"),
.keep_all = FALSE)
raw_data
raw_data |>
slice_head(n = -0)
raw_data |>
slice_head(n = -1)
raw_data |>
slice_tail(n = -1)
raw_data |>
slice_tail(n = -0)
raw_data |>
slice_min(index, n = -0)
raw_data |>
slice_min(index, n = 0)
raw_data |>
slice_min(index, n = 1)
