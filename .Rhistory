nirs_columns = c(VL_O2Hb = 5, VL_HHb = 6),
sample_column = c(sample = 1),
# event_column = c(event = "...11"),
.keep_all = FALSE))
# # attributes(data)
#
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
resample_rate = 1, ## 10 Hz
# resample_time = 0.01,
# nirs_columns,
))
y$sample
floor(y$sample * resample_rate)
resample_rate = 1
sample_rate = 50
# attributes(y)
y |>
dplyr::mutate(
dplyr::across(
sample,
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
sample,
\(.x) floor(.x * resample_rate) / resample_rate),
)
# attributes(y)
y |>
dplyr::mutate(
dplyr::across(
sample,
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
sample,
\(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
)
# attributes(y)
y |>
dplyr::mutate(
dplyr::across(
sample,
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
sample,
\(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
) |>
print(n=100)
# attributes(y)
y |>
dplyr::mutate(
dplyr::across(
sample,
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
sample,
\(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
) |>
print(n=103)
# attributes(y)
y |>
dplyr::mutate(
dplyr::across(
sample,
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
sample,
\(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
) |>
dplyr::summarise(
.by = sample,
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
print(n=103)
166419/50
dplyr::select(-delta_sample) |>
# dplyr::full_join(
#     tibble::tibble(
#         sample = seq(
#             floor(min(sample_vector, na.rm = TRUE)
#                   * sample_rate) / sample_rate,
#             ceiling(max(sample_vector, na.rm = TRUE)
#                     * sample_rate) / sample_rate,
#             by = 1 / resample_rate),
#     ),
#     by = "sample"
# ) |>
# dplyr::arrange(dplyr::pick(dplyr::any_of(sample_column))) |>
dplyr::mutate(
dplyr::across(
where(is.numeric),
\(.x) mNIRS::replace_missing_values(
.x, method = "linear", na.rm = TRUE)$y),
)
# attributes(y)
y |>
dplyr::mutate(
dplyr::across(
sample,
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
sample,
\(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
) |>
dplyr::summarise(
.by = sample,
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
# print(n=103)
dplyr::select(-delta_sample) |>
# dplyr::full_join(
#     tibble::tibble(
#         sample = seq(
#             floor(min(sample_vector, na.rm = TRUE)
#                   * sample_rate) / sample_rate,
#             ceiling(max(sample_vector, na.rm = TRUE)
#                     * sample_rate) / sample_rate,
#             by = 1 / resample_rate),
#     ),
#     by = "sample"
# ) |>
# dplyr::arrange(dplyr::pick(dplyr::any_of(sample_column))) |>
# dplyr::mutate(
#     dplyr::across(
#         where(is.numeric),
#         \(.x) mNIRS::replace_missing_values(
#             .x, method = "linear", na.rm = TRUE)$y),
# )
print(n=103)
(data <- mNIRS::read_data(
file_path = "C:/OneDrive - UBC/Body Position Study/Raw Data/BP01-Train.Red-2025-04-01.csv",
nirs_columns = c("smo2_left" = "SmO2 unfiltered",
"HHb_left" = "HHb unfiltered",
"O2Hb_left" = "O2HB unfiltered",
"smo2_right" = "SmO2 unfiltered"),
sample_column = c("time" = "Timestamp (seconds passed)"),
event_column = c("Lap" = "Lap/Event")))
#
# (data <- mNIRS::read_data(
#     file_path = "C:/OneDrive - UBC/Body Position Study/Raw Data/BP01-Train.Red-2025-04-01.csv",
#     nirs_columns = c("smo2_left" = "SmO2 unfiltered",
#                      "HHb_left" = "HHb unfiltered",
#                      "O2Hb_left" = "O2HB unfiltered",
#                      "smo2_right" = "SmO2 unfiltered"),
#     sample_column = c("time" = "Timestamp (seconds passed)"),
#     event_column = c("Lap" = "Lap/Event")))
(data <- mNIRS::read_data(
file_path = r"(C:\OneDrive - UBC\Body Position Study\Raw Data\Eva-pilot-Oxy-2025-05-27.xlsx)",
nirs_columns = c(VL_O2Hb = 5, VL_HHb = 6),
sample_column = c(sample = 1),
# event_column = c(event = "...11"),
.keep_all = FALSE))
# # attributes(data)
#
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 50,
resample_rate = 1, ## 10 Hz
# resample_time = 0.01
))
attributes(y)
attributes(data)
#
library(ggplot2)
library(JAPackage)
ggplot(y) +
{list( ## Settings
aes(x = sample, y = VL_O2Hb),
# coord_cartesian(
#     xlim = c(NA, 20),
#     ylim = c(0, 40)),
theme_JA(),
NULL)} + ## Settings
{list( ## Data
geom_line(),
# geom_point(),
NULL)} ## Data
ggplot(data) +
{list( ## Settings
aes(x = sample, y = VL_O2Hb),
# coord_cartesian(
#     xlim = c(NA, 20),
#     ylim = c(0, 40)),
theme_JA(),
NULL)} + ## Settings
{list( ## Data
geom_line(),
# geom_point(),
NULL)} ## Data
(data <- mNIRS::read_data(
file_path = "C:/OneDrive - UBC/Body Position Study/Raw Data/BP01-Train.Red-2025-04-01.csv",
nirs_columns = c("smo2_left" = "SmO2 unfiltered",
"HHb_left" = "HHb unfiltered",
"O2Hb_left" = "O2HB unfiltered",
"smo2_right" = "SmO2 unfiltered"),
sample_column = c("time" = "Timestamp (seconds passed)"),
event_column = c("Lap" = "Lap/Event")))
# (data <- mNIRS::read_data(
#     file_path = r"(C:\OneDrive - UBC\Body Position Study\Raw Data\Eva-pilot-Oxy-2025-05-27.xlsx)",
#     nirs_columns = c(VL_O2Hb = 5, VL_HHb = 6),
#     sample_column = c(sample = 1),
#     # event_column = c(event = "...11"),
#     .keep_all = FALSE))
attributes(data)
#
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 50,
resample_rate = 1, ## 10 Hz
# resample_time = 0.01
))
#
(y <- mNIRS::resample_dataframe(
data = data,
# sample_column = "time",
# sample_rate = 50,
resample_rate = 10, ## 10 Hz
# resample_time = 0.01
))
sample_column = "time"
sample_rate = 10
resample_rate = 10
resample_time = NULL
sample_column
## Validation =================================
metadata <- attributes(data)
sample_column
as.numeric(data[[sample_column]])
sample_vector <- as.numeric(data[[sample_column]])
sample_rate
if (!is.null(resample_rate) & is.null(resample_time)) {
resample_rate
} else if (!is.null(resample_time) & is.null(resample_rate)) {
1 / resample_time
} else {
cli::cli_abort(paste(
"Either {.arg sample_rate} or {.arg sample_time}",
"should be defined, not both."))
}
data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
\(.x) floor(round(.x / sample_rate) * resample_rate) /
resample_rate),
)
data
y <- data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
# \(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
\(.x) round(.x / sample_rate)
) |> print()
dplyr::summarise(
y <- data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
# \(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
\(.x) round(.x / sample_rate))
) |> print()
sample_rate
y <- data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
# \(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
\(.x) round(.x / sample_rate))
) |> print(n=40)
data
sample_column
y <- data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
# dplyr::across(
#     dplyr::any_of(sample_column),
#     # \(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
#     \(.x) round(.x / sample_rate))
) |> print(n=40)
y <- data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
# \(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
\(.x) round(.x / sample_rate)*sample_rate)
) |> print(n=40)
y <- data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
# \(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
\(.x) round(.x * sample_rate)/sample_rate)
) |> print(n=40)
resample_rate
resample_rate=5
y <- data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
# \(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
\(.x) round(.x * sample_rate)/resample_rate)
) |> print(n=40)
y <- data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
# dplyr::across(
#     dplyr::any_of(sample_column),
#     # \(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
#     \(.x) round(.x * sample_rate)/resample_rate)
) |> print(n=20)
y <- data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
# \(.x) floor(round(.x / sample_rate) * resample_rate) / resample_rate),
\(.x) round(.x * sample_rate)/resample_rate)
) |> print(n=20)
data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
\(.x) round(.x * sample_rate)/resample_rate)
) |>
dplyr::summarise(
.by = dplyr::any_of(sample_column),
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample)
data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
\(.x) round(.x * sample_rate)/resample_rate)
) |>
dplyr::summarise(
.by = dplyr::any_of(sample_column),
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample) |>
dplyr::filter(
!dplyr::any_of(sample_column)
& dplyr::if_all(dplyr::where(is.numeric)),
\(.x) !is.na(.x)
)
data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
\(.x) round(.x * sample_rate)/resample_rate)
) |>
dplyr::summarise(
.by = dplyr::any_of(sample_column),
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample) |>
dplyr::filter(
dplyr::if_all(
!dplyr::any_of(sample_column)
& dplyr::where(is.numeric),
\(.x) !is.na(.x))
)
y <- data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
\(.x) round(.x * sample_rate)/resample_rate)
) |>
dplyr::summarise(
.by = dplyr::any_of(sample_column),
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample) |>
dplyr::filter(
dplyr::if_all(
!dplyr::any_of(sample_column)
& dplyr::where(is.numeric),
\(.x) !is.na(.x))
) |> tail(n=10) |> print()
y <- data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(sample_column),
\(.x) c(diff(.x), NA),
.names = "delta_sample"),
dplyr::across(
dplyr::any_of(sample_column),
\(.x) round(.x * sample_rate)/resample_rate)
) |>
dplyr::summarise(
.by = dplyr::any_of(sample_column),
## weighted mean value for numeric columns
dplyr::across(
dplyr::where(is.numeric),
\(.x) weighted.mean(.x, delta_sample, na.rm = TRUE)),
## take the first non-na value from other columns
dplyr::across(
!dplyr::where(is.numeric),
\(.x) dplyr::first(na.omit(.x))),
) |>
dplyr::select(-delta_sample) |>
# dplyr::filter(
#     dplyr::if_all(
#         !dplyr::any_of(sample_column)
#         & dplyr::where(is.numeric),
#     \(.x) !is.na(.x))
# ) |>
tail(n=10) |> print()
