#   # values = scales::hue_pal()(2),
#   # values = Palette_JA(),
#   # labels = c(),
#   limits = force),
# guides(colour = guide_legend(
#     nrow = 1, byrow = FALSE,
#     override.aes = list(shape = NA, linewidth = 5, alpha = 1))),
NULL)} + ## Settings
{list( ## Data
geom_line(aes(y = Watts, colour = "Pedals")),
geom_line(aes(x = Time, y = power, colour = "Velotron")),
NULL)} ## Data
Wpeak <- fit_data |>
mutate(
Wpeak = zoo::rollmax(Watts, k = 30)
) |>
summarise(
Wpeak = max(Wpeak, na.rm = TRUE)
)
fit_data |>
mutate(
Wpeak = zoo::rollmax(Watts, k = 30)
)
fit_data |>
mutate(
Wpeak = zoo::rollmax(Watts, k = 30, fill = NA),
) |>
summarise(
Wpeak = max(Wpeak, na.rm = TRUE)
)
fit_data |>
filter(between(Time, 1700, 2600)) |>
mutate(
Wpeak = zoo::rollmax(Watts, k = 30, fill = NA),
) |>
summarise(
Wpeak = max(Wpeak, na.rm = TRUE)
)
fit_data
fit_data <-
left_join(
perfpro_data,
velo_data %>%
rename(cadence_velo = cadence) %>%
mutate(Time = Time + 1774),
by = "Time"
) %>%
mutate(
Time = round(Time),
) |>
summarise(
.by = Time,
across(where(is.numeric), ~ mean(., na.rm = TRUE)),
across(where(is.character), ~ first(na.omit(.))),
) |>
print()
fit_data |>
filter(between(Time, 1700, 2600))
fit_data |>
filter(between(Time, 1700, 2600)) |>
mutate(
Wpeak = zoo::rollmax(Watts, k = 60, fill = NA),
) |>
summarise(
Wpeak = max(Wpeak, na.rm = TRUE)
)
fit_data |>
filter(between(Time, 1700, 2600)) |>
mutate(
Wpeak = zoo::rollmax(Watts, k = 30, fill = NA),
) |>
summarise(
Wpeak = max(Wpeak, na.rm = TRUE)
)
fit_data |>
filter(between(Time, 1700, 2600)) |>
mutate(
Wpeak = zoo::rollmax(Watts, k = 60, fill = NA),
) |>
# summarise(
#     Wpeak = max(Wpeak, na.rm = TRUE)
# ) |>
print()
fit_data |>
filter(between(Time, 2400, 2600)) |>
mutate(
Wpeak = zoo::rollmax(Watts, k = 60, fill = NA),
) |>
# summarise(
#     Wpeak = max(Wpeak, na.rm = TRUE)
# ) |>
print()
fit_data |>
filter(between(Time, 2400, 2600)) |>
mutate(
Wpeak = zoo::rollmax(Watts, k = 60, fill = NA),
) |>
# summarise(
#     Wpeak = max(Wpeak, na.rm = TRUE)
# ) |>
tail() |>
print()
fit_data |>
filter(between(Time, 2400, 2600)) |>
mutate(
Wpeak = zoo::rollmax(Watts, k = 60, fill = NA),
) |>
# summarise(
#     Wpeak = max(Wpeak, na.rm = TRUE)
# ) |>
tail(n = 20) |>
print()
fit_data |>
filter(between(Time, 2400, 2600)) |>
mutate(
Wpeak = zoo::rollmax(Watts, k = 60, fill = NA),
) |>
# summarise(
#     Wpeak = max(Wpeak, na.rm = TRUE)
# ) |>
arrange(Watts) |>
tail(n = 20) |>
print()
fit_data |>
filter(between(Time, 2400, 2600)) |>
mutate(
Wpeak = zoo::rollmean(Watts, k = 60, fill = NA),
) |>
# summarise(
#     Wpeak = max(Wpeak, na.rm = TRUE)
# ) |>
print()
fit_data |>
filter(between(Time, 2400, 2600)) |>
mutate(
Wpeak = zoo::rollmean(Watts, k = 60, fill = NA),
) |>
summarise(
Wpeak = max(Wpeak, na.rm = TRUE)
) |>
print()
fit_data |>
filter(between(Time, 2400, 2600)) |>
mutate(
Wpeak = zoo::rollmean(Watts, k = 30, fill = NA),
) |>
summarise(
Wpeak = max(Wpeak, na.rm = TRUE)
) |>
print()
fit_data |>
filter(between(Time, 2400, 2600)) |>
mutate(
Wpeak = zoo::rollmean(Watts, k = 60, fill = NA),
) |>
summarise(
Wpeak = max(Wpeak, na.rm = TRUE)
) |>
print()
.data |>
# dplyr::mutate(
#     dplyr::across(
#         any_of(sample_column),
#         ~ as.character(.)
#     )
# ) |>
dplyr::filter(
index %in% event_index |
dplyr::if_any(
any_of(sample_column),
~ grepl(paste(event_sample, collapse = "|"), .)) |
dplyr::if_any(
any_of(event_column),
~ grepl(paste(event_label, collapse = "|"), .))
) #|>
sample_column
.data |>
# dplyr::mutate(
#     dplyr::across(
#         any_of(sample_column),
#         ~ as.character(.)
#     )
# ) |>
dplyr::filter(
index %in% event_index |
dplyr::if_any(
any_of(names(sample_column)),
~ grepl(paste(event_sample, collapse = "|"), .)) |
dplyr::if_any(
any_of(names(event_column)),
~ grepl(paste(event_label, collapse = "|"), .))
) #|>
event_index
.data |>
# dplyr::mutate(
#     dplyr::across(
#         any_of(sample_column),
#         ~ as.character(.)
#     )
# ) |>
dplyr::filter(
index %in% event_index #|
# dplyr::if_any(
#     any_of(names(sample_column)),
#     ~ grepl(paste(event_sample, collapse = "|"), .)) |
# dplyr::if_any(
#     any_of(names(event_column)),
#     ~ grepl(paste(event_label, collapse = "|"), .))
) #|>
.data |>
# dplyr::mutate(
#     dplyr::across(
#         any_of(sample_column),
#         ~ as.character(.)
#     )
# ) |>
dplyr::filter(
index %in% event_index |
dplyr::if_any(
any_of(names(sample_column)),
~ grepl(paste(event_sample, collapse = "|"), .)) |
# dplyr::if_any(
#     any_of(names(event_column)),
#     ~ grepl(paste(event_label, collapse = "|"), .))
) #|>
.data |>
# dplyr::mutate(
#     dplyr::across(
#         any_of(sample_column),
#         ~ as.character(.)
#     )
# ) |>
dplyr::filter(
index %in% event_index |
dplyr::if_any(
any_of(names(sample_column)),
~ grepl(paste(event_sample, collapse = "|"), .)) #|
# dplyr::if_any(
#     any_of(names(event_column)),
#     ~ grepl(paste(event_label, collapse = "|"), .))
) #|>
event_sample
.data |>
# dplyr::mutate(
#     dplyr::across(
#         any_of(sample_column),
#         ~ as.character(.)
#     )
# ) |>
dplyr::filter(
index %in% event_index |
dplyr::if_any(
any_of(names(sample_column)),
# ~ grepl(paste(event_sample, collapse = "|"), .)) #|
~ . == paste(event_sample, collapse = "|"))
# dplyr::if_any(
#     any_of(names(event_column)),
#     ~ grepl(paste(event_label, collapse = "|"), .))
) #|>
event_sample
.data |>
# dplyr::mutate(
#     dplyr::across(
#         any_of(sample_column),
#         ~ as.character(.)
#     )
# ) |>
dplyr::filter(
index %in% event_index |
dplyr::if_any(
any_of(names(sample_column)),
# ~ grepl(paste(event_sample, collapse = "|"), .)) #|
~ . %in% paste(event_sample, collapse = "|"))
# dplyr::if_any(
#     any_of(names(event_column)),
#     ~ grepl(paste(event_label, collapse = "|"), .))
) #|>
paste(event_sample, collapse = "|")
.data |>
# dplyr::mutate(
#     dplyr::across(
#         any_of(sample_column),
#         ~ as.character(.)
#     )
# ) |>
dplyr::filter(
index %in% event_index |
dplyr::if_any(
any_of(names(sample_column)),
# ~ grepl(paste(event_sample, collapse = "|"), .)) #|
~ . %in% event_sample)
# dplyr::if_any(
#     any_of(names(event_column)),
#     ~ grepl(paste(event_label, collapse = "|"), .))
) #|>
names(event_column)
event_label
.data |>
dplyr::mutate(
dplyr::across(
any_of(sample_column),
~ as.character(.)
)
) |>
dplyr::filter(
index %in% event_index |
dplyr::if_any(
any_of(names(sample_column)),
# ~ grepl(paste(event_sample, collapse = "|"), .)) #|
~ . %in% paste(event_sample, collapse = "|"))
# dplyr::if_any(
#     any_of(names(event_column)),
#     ~ grepl(paste(event_label, collapse = "|"), .))
) #|>
.data |>
dplyr::mutate(
dplyr::across(
any_of(sample_column),
~ as.character(.)
)
)
paste(event_sample, collapse = "|")
event_sample
as.character(event_sample)
.data |>
dplyr::mutate(
dplyr::across(
any_of(sample_column),
~ as.character(.)
)
) |>
dplyr::filter(
index %in% event_index |
dplyr::if_any(
any_of(names(sample_column)),
# ~ grepl(paste(event_sample, collapse = "|"), .)) #|
~ . %in% as.character(event_sample))
# dplyr::if_any(
#     any_of(names(event_column)),
#     ~ grepl(paste(event_label, collapse = "|"), .))
) #|>
.data |>
dplyr::mutate(
dplyr::across(
any_of(sample_column),
~ as.character(.)
)
) |>
dplyr::filter(
index %in% event_index |
dplyr::if_any(
any_of(names(sample_column)),
~ . %in% as.character(event_sample)) |
dplyr::if_any(
any_of(names(event_column)),
~ grepl(paste(event_label, collapse = "|"), .))
) #|>
.data |>
dplyr::mutate(
display_index = index - event_index,
nirs_fit_window = dplyr::if_else(
dplyr::between(display_index, 1, kinetics_fit_window),
nirs, NA_real_),
nirs_fit_window = signif(nirs_fit_window, 3),
)
cli::cli_abort(paste(
"{.arg event_index} must be a {.cls numeric} vector",
"or {.cls NULL}, not {.cls {class(event_index)}}.",
"Enter character strings in {.arg event_label}"))
cli::cli_abort(paste(
"{.arg event_index} must be a {.cls numeric} vector",
"or {.cls NULL}, not {.cls {class(event_index)}}.",
if (is.character(event_index)) {
"Enter {.cls character} in {.arg event_label}"}
))
is.character(event_index)
.data = raw_data
## validation `event_column` should be defined if `event_sample` is
## specified
if ((is.null(event_column) | is.na(event_column)) &
!is.null(event_label)) {
cli::cli_alert_warning(paste(
"{.arg event_column} has not been specified, but",
"{.arg event_label} is set to {.val {event_label}}.",
if (is.numeric(event_label)) {
"Did you mean to set {.arg event_index}?"
},
"These events are currently ignored."))
}
event_column
(is.null(event_column) | is.na(event_column)) &
!is.null(event_label)
## validation `event_column` should be defined if `event_sample` is
## specified
if ((is.null(event_column) | is.na(event_column)) &
!is.null(event_label)) {
cli::cli_alert_warning(paste(
"{.arg event_column} has not been specified, but",
"{.arg event_label} is set to {.val {event_label}}.",
if (is.numeric(event_label)) {
"Did you mean to set {.arg event_index}?"
},
"These events are currently ignored."))
}
## validation: `event_index` must be numeric data
if (!(is.null(event_index) | rlang::is_double(event_index))) {
cli::cli_abort(paste(
"{.arg event_index} must be a {.cls numeric} vector",
"or {.cls NULL}, not {.cls {class(event_index)}}.",
if (is.character(event_index)) {
"Enter {.cls character} in {.arg event_label}"}
))
}
## validation: `event_sample` should be the same type as `sample_column`
## TODO POSIXct might be a bit tricky?
if (!is.null(event_sample)) {
if (all(typeof(event_sample) != typeof(.data[[sample_column]]))) {
cli::cli_abort(paste(
"{.arg event_sample} must be a",
"{.cls {class(.data[[sample_column]])}}",
"or {.cls NULL}, not {.cls {class(event_sample)}}.",
if (is.character(event_sample)) {
"Enter {.cls character} in {.arg event_label}"
},
if (is.numeric(event_sample)) {
"Enter {.cls numeric} in {.arg event_index}"
}))
}
}
## validation: `event_label` must be character string
if (!(is.null(event_label) | rlang::is_character(event_label))) {
cli::cli_abort(paste(
"{.arg event_label} must be a {.cls character} vector",
"or {.cls NULL}, not {.cls {class(event_label)}}.",
"Enter numeric values in {.arg event_index}"))
}
event_label
.data |>
dplyr::mutate(
dplyr::across(
any_of(sample_column),
~ as.character(.)
)
) |>
dplyr::filter(
index %in% event_index |
dplyr::if_any(
any_of(names(sample_column)),
~ . %in% as.character(event_sample)) |
dplyr::if_any(
any_of(names(event_column)),
~ grepl(paste(event_label, collapse = "|"), .))
) |>
dplyr::pull(index)
## detect kinetics events ============================
event_indices <- .data |>
dplyr::mutate(
dplyr::across(
any_of(sample_column),
~ as.character(.)
)
) |>
dplyr::filter(
index %in% event_index |
dplyr::if_any(
any_of(names(sample_column)),
~ . %in% as.character(event_sample)) |
dplyr::if_any(
any_of(names(event_column)),
~ grepl(paste(event_label, collapse = "|"), .))
) |>
dplyr::pull(index)
event_indices
## Troubleshooting =======================================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
(processed_data <- process_data(
raw_data,
sample_rate = 1
))
attributes(processed_data)
## Troubleshooting =======================================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
attributes(raw_data)
(processed_data <- process_data(
raw_data,
sample_rate = 1
))
attributes(processed_data)
## Troubleshooting =======================================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
attributes(raw_data)
(processed_data <- process_data(
raw_data,
sample_rate = 1
))
attributes(processed_data)
source("C:/R-Projects/mNIRS/R/prepare_kinetics_data.R")
