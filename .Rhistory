dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
)
(filtered_data <- filter_data(
.data = raw_data,
sample_rate = 1,
filter_method = "moving-average",
filter_parameters = list(smo2_left_VL = c(k = 15),
smo2_right_VL = c(fc=0.01))
))
#
## Troubleshooting ========================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
# attributes(raw_data)
raw_data <- raw_data |>
dplyr::mutate(
dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
)
(filtered_data <- filter_data(
.data = raw_data,
sample_rate = 1,
filter_method = "moving-average",
filter_parameters = list(smo2_left_VL = c(k = 15),
smo2_right_VL = c(fc=0.01))
))
#'
#' @return A [tibble][tibble::tibble-package].
#'
#' @export
filter_data <- function(
.data,
sample_rate,
handle_missing_values = c("interpolate", "omit", "none"),
filter_method = list("none", "smooth-spline", "low-pass", "moving-average"),
filter_parameters = NULL,
...
) {
## validation: check for metadata to ensure `read_data()` has been run
if (is.null(attributes(.data)$nirs_columns)) {
cli::cli_abort(paste(
"Data should be extracted with {.fn read_data} before processing."
))
}
## pass through optional arguments
handle_missing_values <- match.arg(handle_missing_values)
args <- list(...)
metadata <- attributes(.data)
nirs_columns <- metadata$nirs_columns
## validation: `filter_method` must be a character vector or list
if (any(!unlist(filter_method) %in% c(
"none", "smooth-spline", "low-pass", "moving-average"))) {
cli::cli_abort(paste(
"{.arg filter_method} not recognised. Please see `?filter_data()`",
"for options"))
}
## handle missing values ================================
if (handle_missing_values == "interpolate") {
if ("maxgap" %in% names(args)) {
maxgap <- args$maxgap
cli::cli_alert_info("`na.approx(maxgap = {.val {maxgap}})`")
} else {maxgap <- Inf}
data_nomissing <- .data |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(names(nirs_columns)),
~ zoo::na.approx(
., na.rm = FALSE, rule = 2, maxgap = maxgap)),
)
} else if (handle_missing_values == "none") {
data_nomissing <- .data
}
## set digital filter parameters ===================================
## Filter methods can be defined column-wise or globally
## a vector will be converted to a list, a list will be
## converted to a named list. The named list will be mapped over
## to filter each defined nirs_column
filter_method_list <-
assign_to_named_list(filter_method, nirs_columns)
default_parameters <- lapply(
filter_method_list,
\(x)
list("smooth-spline" = c(spar = 0),
"low-pass" = c(n = 2, fc = 0.05),
"moving-average" = c(k = 5),
"none" = NULL)[[x]]
)
filter_parameters_list <-
assign_to_named_list(filter_parameters, nirs_columns)
filter_parameters_list <- lapply(
names(filter_method_list),
\(nirs) {
if (is.null(filter_parameters_list[[nirs]])) {
default_parameters[[nirs]]
} else if (
length(intersect(
names(filter_parameters_list[[nirs]]),
names(default_parameters[[nirs]]))) > 0
) {
param_replace_list <- intersect(
names(filter_parameters_list[[nirs]]),
names(default_parameters[[nirs]]))
default_parameters[[nirs]][param_replace_list] <-
filter_parameters_list[[nirs]]
default_parameters[[nirs]]
} else {
default_parameters[[nirs]]
}
}) |>
setNames(nirs_columns)
## Apply digital filter ============================================
data_filtered <- purrr::imap(
filter_method_list,
\(method, nirs) {
if (method != "none") {
list2env(
as.list(filter_parameters_list[[nirs]]),
envir = .GlobalEnv)
cli::cli_alert_info(paste(
"{.arg {nirs}}: {.val {method}} = ",
"{.val {filter_parameters_list[nirs]}}."
))
data_nomissing |>
dplyr::select(index, dplyr::any_of(nirs)) |>
dplyr::mutate(
dplyr::across(
dplyr::any_of(nirs),
~ if (method == "smooth-spline") {
stats::smooth.spline(x = index, y = .)$y
} else if (method == "low-pass") {
filtfilt_edges(., n = n, W = fc / (sample_rate/2))
} else if (method == "moving-average") {
zoo::rollapply(
., width = k, FUN = mean,
partial = TRUE, na.rm = TRUE)
}  else if (method == "none") {.}
)) |>
dplyr::select(-index)
} else if (method == "none") {
data_nomissing |>
dplyr::select(dplyr::any_of(nirs))
}
}) |>
dplyr::bind_cols(
dplyr::select(
.data,
-dplyr::any_of(names(filter_method_list)))
) |>
dplyr::relocate(names(.data)) ## data_filtered
# data_filtered <- purrr::imap(
#     filter_method_list,
#     \(filter_method, nirs) {
#
#         if (filter_method == "smooth-spline") {
#
#             data_nomissing |>
#                 dplyr::select(dplyr::any_of(nirs)) |>
#                 dplyr::mutate(
#                     dplyr::across(
#                         dplyr::any_of(names(nirs)),
#                         ~ stats::smooth.spline(x = index, y = .)$y),
#                 )
#
#         } else if (filter_method == "low-pass") {
#
#             if (!all(is.null(filter_parameters_list[[nirs]]))) {
#                 if (
#                     any(grepl("n", names(filter_parameters_list[[nirs]]),
#                               ignore.case = TRUE)) &
#                     any(grepl("fc|W", names(filter_parameters_list[[nirs]]),
#                               ignore.case = TRUE))
#                 ) {
#                     list2env(
#                         as.list(filter_parameters_list[[nirs]]),
#                         envir = .GlobalEnv)
#                 } else {
#                     cli::cli_abort(paste(
#                         "{.arg filter_parameters} should be a named
#                         {.cls numeric} vector which includes {.arg n} and
#                         one of either {.arg fc} or {.arg W}."))
#                 }
#
#             } else if (all(is.null(filter_parameters_list[[nirs]]))) {
#
#                 n <- 1 ## TODO set defaults based on sample_rate?
#                 fc <- 0.05
#
#                 cli::cli_alert_info(paste(
#                     "Low-pass filter order {.arg n} set to {.val {n}}."))
#                 cli::cli_alert_info(paste(
#                     "Low-pass filter order cutoff frequency {.arg fc}
#                         set to {.val {fc}} Hz."))
#             }
#
#             W <- ifelse(!exists("W"), fc / (sample_rate/2), W)
#
#             data_nomissing |>
#                 dplyr::select(dplyr::any_of(nirs)) |>
#                 dplyr::mutate(
#                     dplyr::across(
#                         dplyr::any_of(nirs),
#                         ~ filtfilt_edges(., n = n, W = W)),
#                 )
#
#         } else if (filter_method == "moving-average") {
#
#             if (!all(is.null(filter_parameters_list[[nirs]]))) {
#                 if (any(grepl("k", names(filter_parameters_list[[nirs]]),
#                               ignore.case = TRUE))) {
#                     list2env(
#                         as.list(filter_parameters_list[[nirs]]),
#                         envir = .GlobalEnv)
#                 } else {
#                     cli::cli_abort(paste(
#                         "{.arg filter_parameters} should be a named
#                         {.cls numeric} vector which includes {.arg k}."))
#                 }
#
#             } else if (all(is.null(filter_parameters_list[[nirs]]))) {
#
#                 k <- 5 ## TODO set defaults based on sample_rate?
#
#                 cli::cli_alert_info(paste(
#                     "Moving-average window {.arg k} set to {.val {k}}",
#                     "samples"))
#             }
#
#             data_nomissing |>
#                 dplyr::select(dplyr::any_of(nirs)) |>
#                 dplyr::mutate(
#                     dplyr::across(
#                         dplyr::any_of(names(nirs_columns)),
#                         ~ zoo::rollapply(
#                             ., width = k, FUN = mean,
#                             partial = TRUE, na.rm = TRUE)),
#                 )
#
#         } else if (filter_method == "none") {
#             data_nomissing
#         }
#     }) |>
#     dplyr::bind_cols(
#         dplyr::select(
#             .data,
#             -dplyr::any_of(names(filter_method_list)))
#     ) |>
#     dplyr::relocate(names(.data)) ## data_filtered
## metadata ==================================================
create_mnirs_data(data_filtered, metadata)
# attributes(data_filtered)
}
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
# attributes(raw_data)
raw_data <- raw_data |>
dplyr::mutate(
dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
)
(filtered_data <- filter_data(
.data = raw_data,
sample_rate = 1,
filter_method = "moving-average",
filter_parameters = list(smo2_left_VL = c(k = 15),
smo2_right_VL = c(fc=0.01))
))
#
## Troubleshooting ========================
library(mNIRS)
(raw_data <- read_data(
file_path = r"(C:\OneDrive - UBC\5-1 Assessments\Processed Data\03-2_2021-08-10-data.xlsx)",
nirs_columns = c("smo2_left_VL", "smo2_right_VL"),
sample_column = "Time",
event_column = "Event"))
# attributes(raw_data)
raw_data <- raw_data |>
dplyr::mutate(
dplyr::across(dplyr::matches("smo2_"), ~ round(., 1))
)
(filtered_data <- filter_data(
.data = raw_data,
sample_rate = 1,
filter_method = "moving-average",
filter_parameters = list(smo2_left_VL = c(k = 15),
smo2_right_VL = c(fc=0.01))
))
(filtered_data <- filter_data(
.data = raw_data,
sample_rate = 1,
filter_method = "low-pass",
filter_parameters = list(smo2_left_VL = c(k = 15),
smo2_right_VL = c(fc=0.01))
))
# library(ggplot2)
ggplot(filtered_data) +
aes(x = index) +
theme_minimal() +
geom_line(aes(y = smo2_left_VL)) +
geom_line(aes(y = smo2_right_VL))
library(ggplot2)
ggplot(filtered_data) +
aes(x = index) +
theme_minimal() +
geom_line(aes(y = smo2_left_VL)) +
geom_line(aes(y = smo2_right_VL))
(filtered_data <- filter_data(
.data = raw_data,
sample_rate = 1,
filter_method = "smooth-spline",
filter_parameters = list(smo2_left_VL = c(k = 15),
smo2_right_VL = c(fc=0.01))
))
(filtered_data <- filter_data(
.data = raw_data,
sample_rate = 1,
filter_method = "smooth-spline",
filter_parameters = list(smo2_left_VL = c(k = 15),
smo2_right_VL = c(n = , fc=0.01))
))
(filtered_data <- filter_data(
.data = raw_data,
sample_rate = 1,
filter_method = "smooth-spline",
filter_parameters = list(smo2_left_VL = c(k = 15),
smo2_right_VL = c(n = 4, fc=0.01))
))
library(ggplot2)
ggplot(filtered_data) +
aes(x = index) +
theme_minimal() +
geom_line(aes(y = smo2_left_VL)) +
geom_line(aes(y = smo2_right_VL))
(filtered_data <- filter_data(
.data = raw_data,
sample_rate = 1,
filter_method = "low-pass",
filter_parameters = list(smo2_left_VL = c(k = 15),
smo2_right_VL = c(n = 4, fc=0.01))
))
library(ggplot2)
ggplot(filtered_data) +
aes(x = index) +
theme_minimal() +
geom_line(aes(y = smo2_left_VL)) +
geom_line(aes(y = smo2_right_VL))
filter_method = list("none", "smooth-spline", "low-pass", "moving-average")
any(!unlist(filter_method) %in% c(
"none", "smooth-spline", "low-pass", "moving-average"))
nirs_columns
metadata <- attributes(raw_data)
nirs_columns <- metadata$nirs_columns
nirs_columns
assign_to_named_list(filter_method, names(nirs_columns))
#' assign_to_named_list(
#'     x = list(Q = c(x = "item1", y = "item2"), R = "itemB"),
#'     names = c("A", "B"))
#' assign_to_named_list(
#'     x = list(Q = c(x = "item1", y = "item2"), R = "itemB", S = "itemC"),
#'     names = c("Q", "R", "S"))
#'
#' @return A named list object.
#'
#' @keywords internal
assign_to_named_list <- function(x, names) {
if (is.list(x) & length(names(x)) == length(x)) {
if (any(names(x) != names)) {
cli::cli_abort(paste(
"Names in {.arg x} do not match {.arg names}"
))
}
x
} else if (is.list(x)) {
setNames(rlang::rep_along(names, x), names)
} else {
setNames(rlang::rep_along(names, list(x)), names)
}
}
assign_to_named_list(filter_method, names(nirs_columns))
unlist(filter_method) %in% c(
"none", "smooth-spline", "low-pass", "moving-average")
all(unlist(filter_method) %in% c(
"none", "smooth-spline", "low-pass", "moving-average"))
filter_method = list(smo2_left_VL = "low-pass",
smo2_right_VL = "moving-average")
if (any(!unlist(filter_method) %in% c(
"none", "smooth-spline", "low-pass", "moving-average"))) {
cli::cli_abort(paste(
"{.arg filter_method} not recognised. Please see `?filter_data()`",
"for options"))
}
all(unlist(filter_method) %in% c(
"none", "smooth-spline", "low-pass", "moving-average"))
unlist(filter_method)
unlist(filter_method) %in% c(
"none", "smooth-spline", "low-pass", "moving-average")
sum(unlist(filter_method) %in% c(
"none", "smooth-spline", "low-pass", "moving-average")) == 4
unlist(filter_method) %in% c(
"none", "smooth-spline", "low-pass", "moving-average")
unlist(filter_method)
filter_method = "none"
if (any(!unlist(filter_method) %in% c(
"none", "smooth-spline", "low-pass", "moving-average"))) {
cli::cli_abort(paste(
"{.arg filter_method} not recognised. Please see `?filter_data()`",
"for options"))
}
assign_to_named_list(filter_method, names(nirs_columns))
.data = raw_data
sample_rate = 1
filter_method
filter_method = list(smo2_left_VL = "low-pass",
smo2_right_VL = "moving-average")
# filter_parameters = list(smo2_left_VL = c(n = 2, fc = 0.01))
filter_parameters = list(#smo2_left_VL = c(n = 2, fc = 0.01),
smo2_right_VL = c(k = 15))
#
#
#
filter_method_list <-
assign_to_named_list(filter_method, names(nirs_columns))
filter_method_list
#
#
#
(filter_method_list <-
assign_to_named_list(filter_method, names(nirs_columns)))
(default_parameters <- lapply(
filter_method_list,
\(x)
list("smooth-spline" = c(spar = 0),
"low-pass" = c(n = 2, fc = 0.05),
"moving-average" = c(k = 5),
"none" = NULL)[[x]]
))
(filter_parameters_list <-
assign_to_named_list(filter_parameters, names(nirs_columns)))
filter_method_list
(filter_parameters_list <-
assign_to_named_list(filter_parameters, filter_method_list))
# filter_parameters = list(smo2_left_VL = c(n = 2, fc = 0.01))
filter_parameters = list(smo2_left_VL = NULL,#c(n = 2, fc = 0.01),
smo2_right_VL = c(k = 15))
filter_parameters
#
#
#
(filter_method_list <-
assign_to_named_list(filter_method, names(nirs_columns)))
(default_parameters <- lapply(
filter_method_list,
\(x)
list("smooth-spline" = c(spar = 0),
"low-pass" = c(n = 2, fc = 0.05),
"moving-average" = c(k = 5),
"none" = NULL)[[x]]
))
(filter_parameters_list <-
assign_to_named_list(filter_parameters, filter_method_list))
filter_parameters
filter_method_list
(filter_parameters_list <-
assign_to_named_list(filter_parameters, names(filter_method_list)))
lapply(
names(filter_method_list),
\(nirs) {
if (is.null(filter_parameters_list[[nirs]])) {
default_parameters[[nirs]]
} else if (
length(intersect(
names(filter_parameters_list[[nirs]]),
names(default_parameters[[nirs]]))) > 0
) {
param_replace_list <- intersect(
names(filter_parameters_list[[nirs]]),
names(default_parameters[[nirs]]))
default_parameters[[nirs]][param_replace_list] <-
filter_parameters_list[[nirs]]
default_parameters[[nirs]]
} else {
default_parameters[[nirs]]
}
}) |>
setNames(names(nirs_columns))
filter_method_list
filter_parameters_list
lapply(
names(filter_method_list),
\(nirs) {
if (is.null(filter_parameters_list[[nirs]])) {
default_parameters[[nirs]]
} else if (
length(intersect(
names(filter_parameters_list[[nirs]]),
names(default_parameters[[nirs]]))) > 0
) {
param_replace_list <- intersect(
names(filter_parameters_list[[nirs]]),
names(default_parameters[[nirs]]))
default_parameters[[nirs]][param_replace_list] <-
filter_parameters_list[[nirs]]
default_parameters[[nirs]]
} else {
default_parameters[[nirs]]
}
}) |>
setNames(names(nirs_columns))
