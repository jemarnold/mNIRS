})
test_that("peak_directional_slope works with different alignments", {
y <- c(1, 3, 2, 5, 8, 7, 9, 12, 11, 14)
result_center <- peak_directional_slope(y, width = 3, align = "center")
result_left <- peak_directional_slope(y, width = 3, align = "left")
result_right <- peak_directional_slope(y, width = 3, align = "right")
expect_type(result_center$value, "double")
expect_type(result_left$value, "double")
expect_type(result_right$value, "double")
expect_equal(result_center$idx, result_left$idx+1)
expect_equal(result_center$idx, result_right$idx-1)
})
test_that("peak_directional_slope works with different alignments", {
y <- c(1, 3, 2, 5, 8, 7, 9, 12, 11, 14)
result_center <- peak_directional_slope(y, width = 3, align = "center")
result_left <- peak_directional_slope(y, width = 3, align = "left")
result_right <- peak_directional_slope(y, width = 3, align = "right")
expect_type(result_center$value, "double")
expect_type(result_left$value, "double")
expect_type(result_right$value, "double")
expect_equal(result_center$idx, result_left$idx+1)
expect_equal(result_center$idx, result_right$idx-1)
expect_equal(result_left$idx+1, result_right$idx-1)
})
peak_directional_slope(c(5), width = 3)
## single value
expect_error(peak_directional_slope(c(5), width = 3))
test_that("peak_directional_slope handles edge cases", {
## single value
expect_error(peak_directional_slope(c(5), width = 3))
# Two values
y_short <- c(1, 3)
result <- peak_directional_slope(y_short, width = 3)
expect_type(result$value, "double")
# All identical values
y_flat <- rep(5, 10)
result <- peak_directional_slope(y_flat, width = 3)
expect_equal(result$value, 0)
})
test_that("peak_directional_slope handles edge cases", {
## single value
expect_error(peak_directional_slope(c(5), width = 3))
# Two values
y_short <- c(1, 3)
result <- peak_directional_slope(y_short, width = 3)
expect_type(result$value, "double")
# All identical values
y_flat <- rep(5, 10)
result <- peak_directional_slope(y_flat, width = 3)
expect_equal(result$value, 0)
})
peak_directional_slope(c(5), width = 3)
peak_directional_slope(c(1, 3), width = 3)
## two values
result <- peak_directional_slope(c(1, 3), width = 3)
expect_type(result$value, "double")
expect_gte(result$idx, 1)
expect_lte(result$idx, length(y))
peak_directional_slope(c(5), width = 3)
peak_directional_slope(c(5, 5), width = 3)
cli::cli_abort(paste(
"{.arg y} should be length 2 or greater."
))
# All identical values
y_flat <- rep(5, 10)
result <- peak_directional_slope(y_flat, width = 3)
result
expect_gte(result$idx, 1)
test_that("peak_directional_slope handles edge cases", {
## single value
expect_error(peak_directional_slope(c(5), width = 3))
## two values
result <- peak_directional_slope(c(1, 3), width = 3)
expect_type(result$value, "double")
expect_gte(result$idx, 1)
expect_lte(result$idx, length(y))
# All identical values
y_flat <- rep(5, 10)
result <- peak_directional_slope(y_flat, width = 3)
expect_equal(result$value, 0)
expect_gte(result$idx, 1)
})
## all NA
y_all_na <- rep(NA, 5)
result <- peak_directional_slope(y_all_na, width = 3, na.rm = TRUE)
result
expect_true(is.na(result$value))
cli::cli_abort(paste(
"{.arg y} should contain at least 2 or more non-`NA` values.")
}
cli::cli_abort(paste(
"{.arg y} should contain at least 2 or more non-`NA` values."))
cli::cli_abort(paste(
"{.arg y} should contain at least 2 or more non-{.val NA} values."))
cli::cli_abort(paste(
"{.arg y} should contain at least 2 or more non-`NA` values."))
cli::cli_abort(paste(
"{.arg y} should contain at least 2 or more non-NA values."))
devtools::load_all()
test_that("peak_directional_slope handles edge cases", {
## single value
expect_error(peak_directional_slope(c(5), width = 3))
## two values
result <- peak_directional_slope(c(1, 3), width = 3)
expect_type(result$value, "double")
expect_gte(result$idx, 1)
expect_lte(result$idx, length(y))
## all identical values
y_flat <- rep(5, 10)
result <- peak_directional_slope(y_flat, width = 3)
expect_equal(result$value, 0)
expect_gte(result$idx, 1)
## all NA
y_all_na <- rep(NA, 5)
result <- peak_directional_slope(y_all_na, width = 3, na.rm = TRUE)
expect_true(is.na(result$value))
})
## single value
expect_error(peak_directional_slope(c(5), width = 3))
## two values
result <- peak_directional_slope(c(1, 3), width = 3)
expect_type(result$value, "double")
expect_gte(result$idx, 1)
expect_lte(result$idx, length(y))
## all identical values
y_flat <- rep(5, 10)
result <- peak_directional_slope(y_flat, width = 3)
expect_equal(result$value, 0)
expect_gte(result$idx, 1)
## all NA
y_all_na <- rep(NA, 5)
result <- peak_directional_slope(y_all_na, width = 3, na.rm = TRUE)
peak_directional_slope(y_all_na, width = 3, na.rm = TRUE)
peak_directional_slope(c(5), width = 3)
## single value
expect_error(peak_directional_slope(c(5), width = 3), "should be of length 2 or greater")
## single value
expect_error(peak_directional_slope(c(5), width = 3), "should be of length 2 or greateras")
expect_error(peak_directional_slope(c(5), width = 3), "asdasd")
expect_error(peak_directional_slope(c(5), width = 3), "should be of length 2 or greater")
## all NA
y_all_na <- rep(NA, 5)
result <- peak_directional_slope(y_all_na, width = 3, na.rm = TRUE)
## all NA
y_all_na <- rep(NA, 5)
expect_error(peak_directional_slope(y_all_na, width = 3, na.rm = TRUE),
"should contain at least 2 or more non-NA values")
## all NA
expect_error(
peak_directional_slope(rep(NA, 5), width = 3, na.rm = TRUE),
"should contain at least 2 or more non-NA values")
test_that("peak_directional_slope handles edge cases", {
## single value
expect_error(peak_directional_slope(c(5), width = 3), "should be of length 2 or greater")
## two values
result <- peak_directional_slope(c(1, 3), width = 3)
expect_type(result$value, "double")
expect_gte(result$idx, 1)
expect_lte(result$idx, length(y))
## all identical values
y_flat <- rep(5, 10)
result <- peak_directional_slope(y_flat, width = 3)
expect_equal(result$value, 0)
expect_gte(result$idx, 1)
## all NA
expect_error(
peak_directional_slope(rep(NA, 5), width = 3, na.rm = TRUE),
"should contain at least 2 or more non-NA values")
})
## two values
result <- peak_directional_slope(c(1, 3), width = 3)
expect_type(result$value, "double")
y <- c(1, 3, 2, 5, 8, 7, 9, 12, 11, 14)
result <- rolling_slope(y, width = 3)
result
expect_type(result, "vector")
expect_type(result, "double")
expect_equal(length(result), length(y))
y <- c(1, 3, 5, 7, 9)
result <- rolling_slope(y, width = 3)
result
c(2, diff(y))
expect_equal(result, c(2, diff(y)))
y <- c(1, 3, 5, 7, 9)
result_null <- rolling_slope(y, x = NULL, width = 3)
result_null
result_seq <- rolling_slope(y, x = seq_along(y), width = 3)
result_seq
expect_equal(result_null, result_seq)
test_that("rolling_slope calculates slopes correctly", {
# Perfect linear trend
y <- c(1, 2, 3, 4, 5)
x <- c(1, 2, 3, 4, 5)
result <- rolling_slope(y, x, width = 3)
# Should be close to 1 for perfect linear trend
expect_true(all(abs(result[!is.na(result)] - 1) < 1e-10))
})
# Perfect linear trend
y <- c(1, 2, 3, 4, 5)
x <- c(1, 2, 3, 4, 5)
result <- rolling_slope(y, x, width = 3)
result
test_that("rolling_slope handles different alignments", {
y <- c(1, 3, 2, 5, 8, 7, 9, 12, 11, 14)
result_center <- rolling_slope(y, width = 3, align = "center")
result_left <- rolling_slope(y, width = 3, align = "left")
result_right <- rolling_slope(y, width = 3, align = "right")
expect_length(result_center, length(y))
expect_length(result_left, length(y))
expect_length(result_right, length(y))
# Different alignments should give different results
expect_false(identical(result_center, result_left))
expect_false(identical(result_center, result_right))
})
y <- c(1, 3, 2, 5, 8, 7, 9, 12, 11, 14)
result_center <- rolling_slope(y, width = 3, align = "center")
result_left <- rolling_slope(y, width = 3, align = "left")
result_right <- rolling_slope(y, width = 3, align = "right")
test_that("rolling_slope handles different alignments", {
y <- c(1, 3, 2, 5, 8, 7, 9, 12, 11, 14)
result_center <- rolling_slope(y, width = 3, align = "center")
result_left <- rolling_slope(y, width = 3, align = "left")
result_right <- rolling_slope(y, width = 3, align = "right")
expect_length(result_center, length(y))
expect_length(result_left, length(y))
expect_length(result_right, length(y))
# Different alignments should give different results
expect_false(identical(result_center, result_left))
expect_false(identical(result_center, result_right))
})
y <- c(1, 3, 2, 5, 8, 7, 9, 12, 11, 14)
result_center <- rolling_slope(y, width = 3, align = "center")
result_left <- rolling_slope(y, width = 3, align = "left")
result_right <- rolling_slope(y, width = 3, align = "right")
result_center
result_left
result_right
test_that("rolling_slope handles NA values", {
y <- c(1, 3, NA, 5, 8, 7, 9, 12, NA, 14)
x <- seq_along(y)
# Without na.rm
result_no_rm <- rolling_slope(y, x, width = 3, na.rm = FALSE)
expect_true(any(is.na(result_no_rm)))
# With na.rm
result_rm <- rolling_slope(y, x, width = 3, na.rm = TRUE)
expect_true(sum(is.na(result_rm)) <= sum(is.na(y)))
})
y <- c(1, 3, NA, 5, 8, 7, 9, 12, NA, 14)
x <- seq_along(y)
y <- c(1, 3, NA, 5, 8, 7, 9, 12, NA, 14)
# Without na.rm
result_no_rm <- rolling_slope(y, width = 3, na.rm = FALSE)
test_that("rolling_slope handles NA values", {
y <- c(1, 3, NA, 5, 8, 7, 9, 12, NA, 14)
# Without na.rm
result_no_rm <- rolling_slope(y, width = 3, na.rm = FALSE)
expect_true(any(is.na(result_no_rm)))
# With na.rm
result_rm <- rolling_slope(y, width = 3, na.rm = TRUE)
expect_true(sum(is.na(result_rm)) <= sum(is.na(y)))
})
sum(is.na(result_rm)) <= sum(is.na(y))
y <- c(1, 3,
NA, 5, 8, 7, 9, 12, NA, 14)
y <- c(1, 3, NA, 5, 8, 7, 9, 12, NA, 14)
# Without na.rm
result_no_rm <- rolling_slope(y, width = 3, na.rm = FALSE)
expect_true(any(is.na(result_no_rm)))
# With na.rm
result_rm <- rolling_slope(y, width = 3, na.rm = TRUE)
expect_true(sum(is.na(result_rm)) <= sum(is.na(y)))
sum(is.na(result_rm)) <= sum(is.na(y))
rolling_slope(c(5), width = 3)
# Single value
expect_true(is.na(rolling_slope(c(5), width = 3)))
rolling_slope(c(1, 3), width = 3)
# Two values
result <- rolling_slope(c(1, 3), width = 3)
expect_length(result, 2)
expect_equal(diff(result), 0)
rolling_slope(rep(5, 10), width = 3)
# All identical values
result <- rolling_slope(rep(5, 10), width = 3)
expect_true(all(result == 0))
# All identical values
result <- rolling_slope(rep(5, 10), width = 3)
expect_true(all(result == 0))
y <- c(1, 3, 2, 5, 8)
# Width larger than data
result <- rolling_slope(y, width = 10)
expect_length(result, length(y))
result
rolling_slope(y, width = 2)
rolling_slope(y, width = 2, na.rm = TRUE)
rolling_slope(y, width = 2, na.rm = TRUE)
# Width of 2 (minimum)
result <- rolling_slope(y, width = 2)
expect_length(result, length(y))
expect_length(na.omit(result), length(y)-1)
## width = 1
rolling_slope(y, width = 1)
is.na(result)
## width = 1
result <- rolling_slope(y, width = 1)
is.na(result)
all(is.na(result))
expect_true(all(is.na(result)))
cli::cli_abort("{.arg width} must be equal to 2 or greater.")
devtools::load_all()
test_that("rolling_slope returns correct structure", {
y <- c(1, 3, 2, 5, 8, 7, 9, 12, 11, 14)
result <- rolling_slope(y, width = 3)
expect_type(result, "double")
expect_equal(length(result), length(y))
})
test_that("rolling_slope works with NULL x", {
y <- c(1, 3, 5, 7, 9)
result_null <- rolling_slope(y, x = NULL, width = 3)
result_seq <- rolling_slope(y, x = seq_along(y), width = 3)
expect_equal(result_null, result_seq)
})
test_that("rolling_slope calculates slopes correctly", {
# Perfect linear trend
y <- c(1, 2, 3, 4, 5)
x <- c(1, 2, 3, 4, 5)
result <- rolling_slope(y, x, width = 3)
# Should be close to 1 for perfect linear trend
expect_true(all(abs(result[!is.na(result)] - 1) < 1e-10))
})
test_that("rolling_slope handles different alignments", {
y <- c(1, 3, 2, 5, 8, 7, 9, 12, 11, 14)
result_center <- rolling_slope(y, width = 3, align = "center")
result_left <- rolling_slope(y, width = 3, align = "left")
result_right <- rolling_slope(y, width = 3, align = "right")
expect_length(result_center, length(y))
expect_length(result_left, length(y))
expect_length(result_right, length(y))
# Different alignments should give different results
expect_false(identical(result_center, result_left))
expect_false(identical(result_center, result_right))
})
test_that("rolling_slope handles NA values", {
y <- c(1, 3, NA, 5, 8, 7, 9, 12, NA, 14)
# Without na.rm
result_no_rm <- rolling_slope(y, width = 3, na.rm = FALSE)
expect_true(any(is.na(result_no_rm)))
# With na.rm
result_rm <- rolling_slope(y, width = 3, na.rm = TRUE)
expect_true(sum(is.na(result_rm)) <= sum(is.na(y)))
})
test_that("rolling_slope handles edge cases", {
# Single value
expect_true(is.na(rolling_slope(c(5), width = 3)))
# Two values
result <- rolling_slope(c(1, 3), width = 3)
expect_length(result, 2)
expect_equal(diff(result), 0)
# All identical values
result <- rolling_slope(rep(5, 10), width = 3)
expect_true(all(result == 0))
})
# Single value
expect_true(is.na(rolling_slope(c(5), width = 3)))
rolling_slope(c(5), width = 3)
## single value
expect_error(rolling_slope(c(5), width = 3), "should be of length 2 or greater")
rolling_slope(c(1, 3), width = 3)
test_that("rolling_slope handles edge cases", {
## single value
expect_error(rolling_slope(c(5), width = 3), "should be of length 2 or greater")
# Two values
result <- rolling_slope(c(1, 3), width = 3)
expect_length(result, 2)
expect_equal(diff(result), 0)
# All identical values
result <- rolling_slope(rep(5, 10), width = 3)
expect_true(all(result == 0))
})
test_that("rolling_slope width handles width edge cases", {
y <- c(1, 3, 2, 5, 8)
# Width larger than data
result <- rolling_slope(y, width = 10)
expect_length(result, length(y))
# Width of 2 (minimum)
result <- rolling_slope(y, width = 2)
expect_length(result, length(y))
expect_length(na.omit(result), length(y)-1)
## width = 1
result <- rolling_slope(y, width = 1)
expect_true(all(is.na(result)))
})
rolling_slope(y, width = 10)
y <- c(1, 3, 2, 5, 8)
rolling_slope(y, width = 10)
# Width larger than data
result <- rolling_slope(y, width = 10)
expect_length(result, length(y))
# Width of 2 (minimum)
result <- rolling_slope(y, width = 2)
expect_length(result, length(y))
expect_length(na.omit(result), length(y)-1)
## width = 1
result <- rolling_slope(y, width = 1)
devtools::load_all()
test_that("rolling_slope handles edge cases", {
## single value
expect_error(
rolling_slope(c(5), width = 3),
"should be of length 2 or greater")
## two values
result <- rolling_slope(c(1, 3), width = 3)
expect_length(result, 2)
expect_equal(diff(result), 0)
## all identical values
expect_error(
rolling_slope(rep(5, 10), width = 3),
"should be equal to 2 or greater")
result <- rolling_slope(rep(5, 10), width = 3)
expect_true(all(result == 0))
})
## single value
expect_error(
rolling_slope(c(5), width = 3),
"should be of length 2 or greater")
## two values
result <- rolling_slope(c(1, 3), width = 3)
expect_length(result, 2)
expect_equal(diff(result), 0)
## all identical values
expect_error(
rolling_slope(rep(5, 10), width = 3),
"should be equal to 2 or greater")
rolling_slope(rep(5, 10), width = 3)
result <- rolling_slope(rep(5, 10), width = 3)
expect_true(all(result == 0))
y <- c(1, 3, 2, 5, 8)
# Width larger than data
result <- rolling_slope(y, width = 10)
expect_length(result, length(y))
# Width of 2 (minimum)
result <- rolling_slope(y, width = 2)
expect_length(result, length(y))
expect_length(na.omit(result), length(y)-1)
## width = 1
result <- rolling_slope(y, width = 1)
## width = 1
expect_error(
rolling_slope(y, width = 1),
"should be equal to 2 or greater")
y <- c(1, 2, 3, 4, 5)
result <- rolling_slope(y, width = 3, align = "center")
result
y <- c(1, 3, 2, 5, 8, 7, 9, 12, 11, 14)
result <- rolling_slope(y, width = 3, align = "center")
result
# First and last positions should use partial windows
expect_false(is.na(result[1]))
expect_false(is.na(result[length(y)]))
diff(y[1:2])
expect_equal(result[1], diff(y[1:2]))
diff(y[1:3])
diff(y[c(1, 3)])
expect_equal(result[2], diff(y[c(1, 3)])/2)
y <- c(1, 3, 2, 5, 8)
# Valid alignment
expect_no_error(rolling_slope(y, width = 3, align = "center"))
# Invalid alignment should error
expect_error(rolling_slope(y, width = 3, align = "invalid"))
rolling_slope(y, width = 3, align = "invalid")
# Invalid alignment should error
expect_error(rolling_slope(y, width = 3, align = "invalid"), "'arg' should be one of")
test_that("rolling_slope match.arg works", {
y <- c(1, 3, 2, 5, 8)
# Valid alignment
expect_no_error(rolling_slope(y, width = 3, align = "center"))
# Invalid alignment should error
expect_error(
rolling_slope(y, width = 3, align = "invalid"),
"'arg' should be one of")
})
y_all_na <- rep(NA, 5)
result <- rolling_slope(y_all_na, width = 3, na.rm = TRUE)
result
y_all_na <- rep(NA, 5)
result <- rolling_slope(y_all_na, width = 3, na.rm = TRUE)
rolling_slope(y_all_na, width = 3, na.rm = TRUE)
rolling_slope(y_all_na, width = 3, na.rm = TRUE)
expect_error(
rolling_slope(rep(NA, 5), width = 3, na.rm = TRUE),
"should contain at least 2 or more non-NA values")
## all NA
expect_error(
rolling_slope(rep(NA, 5), width = 3, na.rm = TRUE),
"should contain at least 2 or more non-NA values")
# All x values identical
y <- c(1, 2, 3, 4, 5)
x <- rep(1, 5)
rolling_slope(y, x, width = 3)
# All x values identical
y <- c(1,
2, 3, 4, 5)
# All x values identical
y <- c(1, 2, 3, 4, 5)
x <- rep(1, 5)
result <- rolling_slope(y, x, width = 3)
expect_true(all(result == 0, na.rm = TRUE))
devtools::load_all()
devtools::check()
usethis::use_package("quarto", type = "suggest")
rlang::check_installed("quarto")
rlang::is_installed("quarto")
usethis::use_import_from("stats", c("na.omit"))
