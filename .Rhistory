expand = expansion(mult = 0.01)
) +
scale_y_continuous(
name = "mNIRS Signals",
breaks = scales::breaks_pretty(n = 6),
expand = expansion(mult = 0.01)
) +
purrr::map(nirs_columns,
\(nirs_columns) geom_line(aes(y = .data[[nirs_columns]],
colour = nirs_columns)))
data_cleaned |>
pivot_longer(
cols = all_of(nirs_columns),
names_to = "nirs_columns",
values_to = "y") |>
ggplot() +
aes(x = time, y = nirs_columns, colour = nirs_columns) +
# labs(title = glue::glue(
#     "<span style = 'color:{Palette_JA('Right')}'> </span> "
# )) +
scale_x_continuous(
name = sample_column,
breaks = scales::breaks_pretty(n = 6),
expand = expansion(mult = 0.01)
) +
scale_y_continuous(
name = "mNIRS Signals",
breaks = scales::breaks_pretty(n = 6),
expand = expansion(mult = 0.01)
) +
geom_line()
data_cleaned |>
pivot_longer(
cols = all_of(nirs_columns),
names_to = "nirs_columns",
values_to = "y") |>
ggplot() +
aes(x = time, y = y, colour = nirs_columns) +
# labs(title = glue::glue(
#     "<span style = 'color:{Palette_JA('Right')}'> </span> "
# )) +
scale_x_continuous(
name = sample_column,
breaks = scales::breaks_pretty(n = 6),
expand = expansion(mult = 0.01)
) +
scale_y_continuous(
name = "mNIRS Signals",
breaks = scales::breaks_pretty(n = 6),
expand = expansion(mult = 0.01)
) +
geom_line()
data_cleaned |>
pivot_longer(
cols = all_of(nirs_columns),
names_to = "nirs_columns",
values_to = "y") |>
ggplot() +
aes(x = time, y = y, colour = nirs_columns) +
# labs(title = glue::glue(
#     "<span style = 'color:{Palette_JA('Right')}'> </span> "
# )) +
scale_x_continuous(
breaks = scales::breaks_pretty(n = 6),
expand = expansion(mult = 0.01)
) +
scale_y_continuous(
name = "mNIRS Signals",
breaks = scales::breaks_pretty(n = 6),
expand = expansion(mult = 0.01)
) +
geom_line()
data_cleaned |>
pivot_longer(
cols = all_of(nirs_columns),
names_to = "nirs_columns",
values_to = "y") |>
ggplot(aes(x = time, y = y, colour = nirs_columns)) +
scale_x_continuous(
# name = sample_column,
breaks = scales::breaks_pretty(n = 6),
expand = expansion(mult = 0.01)
) +
scale_y_continuous(
name = "mNIRS Signals",
breaks = scales::breaks_pretty(n = 6),
expand = expansion(mult = 0.01)
) +
geom_line()
data_cleaned |>
pivot_longer(
cols = all_of(nirs_columns),
names_to = "nirs_columns",
values_to = "y") |>
ggplot(aes(x = time, y = y, colour = nirs_columns)) +
theme(
text = element_text(colour = "black"),
plot.title = element_text(size = rel(1.2), lineheight = 1.1),
plot.subtitle = element_text(lineheight = 1.1),
plot.caption = element_text(colour = "grey50"),
panel.border = element_blank(),
axis.line = element_line(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(face = "bold"),
legend.position = "top",
legend.justification = "right",
legend.margin = margin(rep(1, 4)),
legend.box.spacing = unit(3, "pt"),
strip.background = element_rect(fill = "grey95"),
strip.text = element_text(margin = margin(rep(3, 4))),
) +
scale_x_continuous(
# name = sample_column,
breaks = scales::breaks_pretty(n = 6),
expand = expansion(mult = 0.01)
) +
scale_y_continuous(
name = "mNIRS Signals",
breaks = scales::breaks_pretty(n = 6),
expand = expansion(mult = 0.01)
) +
geom_line()
suppressPackageStartupMessages({
library(JAPackage)
library(mNIRS)
library(tidyverse)
})
options(digits = 5, digits.secs = 3, scipen = 3,
dplyr.summarise.inform = FALSE,
tibble.print_min = 20)
# camcorder::gg_record(
#   dir = "ggplots",
#   width = 220,
#   height = 220*2/3,
#   dpi = 300,
#   units = "mm",
#   device = "png",
#   bg = "white")
# camcorder::gg_stop_recording()
#
data_raw <- mNIRS::read_data(file_path = r"(C:\R-Projects\mNIRS\inst\moxy_ramp_example.xlsx)",
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
event_column = c(event = "Event"),
time_to_numeric = TRUE) |>
# mutate(
#     if (TRUE) dplyr::across(
#         time,
#         \(.x) lubridate::hour(.x) * 3600 +
#             lubridate::minute(.x) * 60 +
#             lubridate::second(.x)),
# ) |>
print()
as.numeric(data_raw[[time]])
as.numeric(data_raw[["time"]])
sample_vector <- as.numeric(data_raw[["time"]])
c(diff(sample_vector) <= 0, FALSE)
duplicated(sample_vector)
any(c(diff(sample_vector) <= 0, FALSE) | duplicated(sample_vector))
data_raw |>
dplyr::filter(
c(diff(time) <= 0, FALSE) |
duplicated(time)
)
data_raw |>
dplyr::filter(
c(diff(time) <= 0, FALSE) |
duplicated(time)
) |>
dplyr::row_number()
data_raw |>
dplyr::filter(
c(diff(time) <= 0, FALSE) |
duplicated(time)
) |>
pull(time)
suppressPackageStartupMessages({
library(JAPackage)
library(mNIRS)
library(tidyverse)
})
options(digits = 5, digits.secs = 3, scipen = 3,
dplyr.summarise.inform = FALSE,
tibble.print_min = 20)
# camcorder::gg_record(
#   dir = "ggplots",
#   width = 220,
#   height = 220*2/3,
#   dpi = 300,
#   units = "mm",
#   device = "png",
#   bg = "white")
# camcorder::gg_stop_recording()
#
suppressPackageStartupMessages({
library(JAPackage)
library(mNIRS)
library(tidyverse)
})
options(digits = 5, digits.secs = 3, scipen = 3,
dplyr.summarise.inform = FALSE,
tibble.print_min = 20)
# camcorder::gg_record(
#   dir = "ggplots",
#   width = 220,
#   height = 220*2/3,
#   dpi = 300,
#   units = "mm",
#   device = "png",
#   bg = "white")
# camcorder::gg_stop_recording()
#
=
data_raw <- mNIRS::read_data(file_path = r"(C:\R-Projects\mNIRS\inst\moxy_ramp_example.xlsx)",
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
event_column = c(event = "Event"),
time_to_numeric = TRUE) |>
# mutate(
#     if (TRUE) dplyr::across(
#         time,
#         \(.x) lubridate::hour(.x) * 3600 +
#             lubridate::minute(.x) * 60 +
#             lubridate::second(.x)),
# ) |>
print()
suppressPackageStartupMessages({
library(JAPackage)
library(mNIRS)
library(tidyverse)
})
options(digits = 5, digits.secs = 3, scipen = 3,
dplyr.summarise.inform = FALSE,
tibble.print_min = 20)
# camcorder::gg_record(
#   dir = "ggplots",
#   width = 220,
#   height = 220*2/3,
#   dpi = 300,
#   units = "mm",
#   device = "png",
#   bg = "white")
# camcorder::gg_stop_recording()
#
data_raw <- mNIRS::read_data(file_path = r"(C:\R-Projects\mNIRS\inst\moxy_ramp_example.xlsx)",
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
event_column = c(event = "Event"),
time_to_numeric = TRUE) |>
# mutate(
#     if (TRUE) dplyr::across(
#         time,
#         \(.x) lubridate::hour(.x) * 3600 +
#             lubridate::minute(.x) * 60 +
#             lubridate::second(.x)),
# ) |>
print()
data_raw
str(data_raw)
devtools::build_readme()
devtools::build_readme()
suppressPackageStartupMessages({
library(JAPackage)
library(mNIRS)
library(tidyverse)
})
options(digits = 5, digits.secs = 3, scipen = 3,
dplyr.summarise.inform = FALSE,
tibble.print_min = 20)
# camcorder::gg_record(
#   dir = "ggplots",
#   width = 220,
#   height = 220*2/3,
#   dpi = 300,
#   units = "mm",
#   device = "png",
#   bg = "white")
# camcorder::gg_stop_recording()
#
data_raw <- mNIRS::read_data(file_path = r"(C:\R-Projects\mNIRS\inst\moxy_ramp_example.xlsx)",
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
event_column = c(event = "Event"),
time_to_numeric = TRUE) |>
print()
plot(data_raw)
suppressPackageStartupMessages({
library(JAPackage)
library(mNIRS)
library(tidyverse)
})
options(digits = 5, digits.secs = 3, scipen = 3,
dplyr.summarise.inform = FALSE,
tibble.print_min = 20)
# camcorder::gg_record(
#   dir = "ggplots",
#   width = 220,
#   height = 220*2/3,
#   dpi = 300,
#   units = "mm",
#   device = "png",
#   bg = "white")
# camcorder::gg_stop_recording()
#
data_raw <- mNIRS::read_data(file_path = r"(C:\R-Projects\mNIRS\inst\moxy_ramp_example.xlsx)",
nirs_columns = c(smo2_left = "smo2_left_VL",
smo2_right = "smo2_right_VL"),
sample_column = c(time = "Time"),
event_column = c(event = "Event"),
time_to_numeric = TRUE) |>
print()
plot(data_raw)
nirs_columns <- attributes(data_raw)$nirs_columns
sample_rate <- attributes(data_raw)$sample_rate
sample_column <- attributes(data_cleaned)$sample_column
data_cleaned <- data_raw |>
mutate(
across(any_of(nirs_columns),
\(.x) replace_outliers(x = .x,
k = 20 * sample_rate, ## 20 sec median window
t0 = 3,
na.rm = TRUE,
return = "median")$y
),
across(any_of(nirs_columns),
\(.x) replace_missing_values(x = .x,
method = "linear",
na.rm = FALSE,
maxgap = Inf)$y
),
across(any_of(nirs_columns),
\(.x) replace_fixed_values(x = .x,
fixed_values = c(0, 100),
k = 20 * sample_rate,
return = "median")$y
)
) |>
resample_dataframe(sample_column = sample_column,
sample_rate = sample_rate,
resample_rate = 1) |>
mutate(
across(any_of(nirs_columns),
\(.x) filter_data(x = .x,
method = "moving-average",
width = 15)
)
) |>
shift_dataframe(nirs_columns = list(nirs_columns), ## convert vector to list to shift each column separately
shift_to = 0,
position = "first",
mean_samples = 30) |>
normalise_dataframe(nirs_columns = as.list(nirs_columns), ## wrap vector in list to shift all columns together
normalise_range = c(0, 100)) |>
print()
sample_column
sample_column <- attributes(data_raw)$sample_column
sample_column
sample_column <- attributes(data_raw)$sample_column
data_cleaned <- data_raw |>
mutate(
across(any_of(nirs_columns),
\(.x) replace_outliers(x = .x,
k = 20 * sample_rate, ## 20 sec median window
t0 = 3,
na.rm = TRUE,
return = "median")$y
),
across(any_of(nirs_columns),
\(.x) replace_missing_values(x = .x,
method = "linear",
na.rm = FALSE,
maxgap = Inf)$y
),
across(any_of(nirs_columns),
\(.x) replace_fixed_values(x = .x,
fixed_values = c(0, 100),
k = 20 * sample_rate,
return = "median")$y
)
) |>
resample_dataframe(sample_column = sample_column,
sample_rate = sample_rate,
resample_rate = 1) |>
mutate(
across(any_of(nirs_columns),
\(.x) filter_data(x = .x,
method = "moving-average",
width = 15)
)
) |>
shift_dataframe(nirs_columns = list(nirs_columns), ## convert vector to list to shift each column separately
shift_to = 0,
position = "first",
mean_samples = 30) |>
normalise_dataframe(nirs_columns = as.list(nirs_columns), ## wrap vector in list to shift all columns together
normalise_range = c(0, 100)) |>
print()
plot(data_cleaned)
devtools::build_readme()
devtools::build_readme()
devtools::check()
devtools::build_readme()
devtools::build_readme()
usethis::use_import_from()
usethis::use_import_from("tidyr", "any_of")
usethis::use_package_doc()
devtools::document()
pkgload::dev_help('mNIRS-package')
usethis::use_import_from("tidyr", "any_of")
?read_data
data.frame(A = 1:3,
B = A*10)
data.frame(A = 1:3,
B = seq(10, 30, 10))
df <- data.frame(A = 1:3,
B = seq(10, 30, 10))
attributes(df)
df <- data.frame(A = 1:3,
B = seq(10, 30, 10),
C = seq(11, 33, 11))
attributes(df)
create_mnirs_data(df,
metadata = list(nirs_columns = c("B", "C"),
sample_column = "A"))
nirs_data <- create_mnirs_data(
df,
metadata = list(nirs_columns = c("B", "C"),
sample_column = "A",
sample_rate = 1)
)
attributes(nirs_data)
nirs_data <- create_mnirs_data(
df,
metadata = list(nirs_columns = c("B", "C"),
sample_column = "A",
sample_rate = 1,
test = "false")
)
attributes(nirs_data)
nirs_data <- create_mnirs_data(
df,
metadata = list(nirs_columns = c("B", "C"),
sample_column = "A",
sample_rate = 1)
)
attributes(nirs_data)
list(nirs_columns = c("B", "C"),
sample_column = "A",
sample_rate = 1)
attributes(nirs_data)
list(nirs_device,
nirs_columns,
sample_column,
event_column,
sample_rate,
event_sample_list,
fit_window,
display_window,
end_kinetics_window)
list(nirs_device = NULL,
nirs_columns = NULL,
sample_column = NULL,
event_column = NULL,
sample_rate = NULL,
event_sample_list = NULL,
fit_window = NULL,
display_window = NULL,
end_kinetics_window = NULL)
c(nirs_device = NULL,
nirs_columns = NULL,
sample_column = NULL,
event_column = NULL,
sample_rate = NULL,
event_sample_list = NULL,
fit_window = NULL,
display_window = NULL,
end_kinetics_window = NULL)
data.frame(nirs_device = NULL,
nirs_columns = NULL,
sample_column = NULL,
event_column = NULL,
sample_rate = NULL,
event_sample_list = NULL,
fit_window = NULL,
display_window = NULL,
end_kinetics_window = NULL)
metadata <- list(nirs_device = NULL,
nirs_columns = NULL,
sample_column = NULL,
event_column = NULL,
sample_rate = NULL,
event_sample_list = NULL,
fit_window = NULL,
display_window = NULL,
end_kinetics_window = NULL)
metadata
df <- data.frame(A = 1:3,
B = seq(10, 30, 10),
C = seq(11, 33, 11))
attributes(df)
nirs_data <- create_mnirs_data(
df,
metadata = list(nirs_columns = c("B", "C"),
sample_column = "A",
sample_rate = 1)
)
attributes(nirs_data)
