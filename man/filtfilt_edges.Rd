% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filtfilt_edges.R
\name{filtfilt_edges}
\alias{filtfilt_edges}
\title{Apply a Butterworth filter with better edge detection}
\usage{
filtfilt_edges(x, n = 1, W = 0.1, edges = c("rev", "rep1", "none"))
}
\arguments{
\item{x}{A numeric vector.}

\item{n}{An integer scalar specifying the filter order number. Passed
through to \code{\link[signal:butter]{signal::butter()}}.}

\item{W}{A numeric scalar between 0 and 1 specifying the relative cutoff
frequency, where 1 is the Nyquist frequency (half of the sample frequency
in Hz).}

\item{edges}{Indicates how to pad \code{x}.
\itemize{
\item \emph{"rev"} (the default) will pad \code{x} with the preceding 10\% data in reverse
sequence.
\item \emph{"rep1"} will pad \code{x} with the last preceding value.
\item \emph{"none"} will return the default \code{\link[signal:filtfilt]{signal::filtfilt()}} output.
}}
}
\value{
A numeric vector of filtered data.
}
\description{
Custom Butterworth filtering function from \code{\link[signal:butter]{signal::butter()}} and
\code{\link[signal:filtfilt]{signal::filtfilt()}} which handles data 'edges' better at the start and
end of data.
}
\examples{
set.seed(13)
sin <- sin(2 * pi * 1:500 / 50) * 20 + 40
noise <- rnorm(500, mean = 0, sd = 6)
noisy_sin <- sin + noise
filt_without_edge <- filtfilt_edges(x = noisy_sin, n = 2, W = 0.1, edges = "none")
filt_with_edge <- filtfilt_edges(x = noisy_sin, n = 2, W = 0.1, edges = "rep1")
plot(noisy_sin, type = "l")
lines(filt_without_edge, col = "red", lwd = 4)
lines(filt_with_edge, col = "blue", lwd = 4)
}
